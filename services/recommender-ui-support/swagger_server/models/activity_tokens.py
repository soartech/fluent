# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ActivityTokens(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, count: int=None):  # noqa: E501
        """ActivityTokens - a model defined in Swagger

        :param type: The type of this ActivityTokens.  # noqa: E501
        :type type: str
        :param count: The count of this ActivityTokens.  # noqa: E501
        :type count: int
        """
        self.swagger_types = {
            'type': str,
            'count': int
        }

        self.attribute_map = {
            'type': 'type',
            'count': 'count'
        }

        self._type = type
        self._count = count

    @classmethod
    def from_dict(cls, dikt) -> 'ActivityTokens':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActivityTokens of this ActivityTokens.  # noqa: E501
        :rtype: ActivityTokens
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ActivityTokens.

        The kind of token - this field should be the CASS identifier for the affiliated TLO or ELO  # noqa: E501

        :return: The type of this ActivityTokens.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ActivityTokens.

        The kind of token - this field should be the CASS identifier for the affiliated TLO or ELO  # noqa: E501

        :param type: The type of this ActivityTokens.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def count(self) -> int:
        """Gets the count of this ActivityTokens.

        How many tokens have been awarded to the learner for the type  # noqa: E501

        :return: The count of this ActivityTokens.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this ActivityTokens.

        How many tokens have been awarded to the learner for the type  # noqa: E501

        :param count: The count of this ActivityTokens.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count
