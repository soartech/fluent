# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ActivityResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, learner_keycloak_id: str=None, timestamp: datetime=None, popularity_rating: int=None, emotion_rating: str=None):  # noqa: E501
        """ActivityResponse - a model defined in Swagger

        :param learner_keycloak_id: The learner_keycloak_id of this ActivityResponse.  # noqa: E501
        :type learner_keycloak_id: str
        :param timestamp: The timestamp of this ActivityResponse.  # noqa: E501
        :type timestamp: datetime
        :param popularity_rating: The popularity_rating of this ActivityResponse.  # noqa: E501
        :type popularity_rating: int
        :param emotion_rating: The emotion_rating of this ActivityResponse.  # noqa: E501
        :type emotion_rating: str
        """
        self.swagger_types = {
            'learner_keycloak_id': str,
            'timestamp': datetime,
            'popularity_rating': int,
            'emotion_rating': str
        }

        self.attribute_map = {
            'learner_keycloak_id': 'learnerKeycloakId',
            'timestamp': 'timestamp',
            'popularity_rating': 'popularityRating',
            'emotion_rating': 'emotionRating'
        }

        self._learner_keycloak_id = learner_keycloak_id
        self._timestamp = timestamp
        self._popularity_rating = popularity_rating
        self._emotion_rating = emotion_rating

    @classmethod
    def from_dict(cls, dikt) -> 'ActivityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActivityResponse of this ActivityResponse.  # noqa: E501
        :rtype: ActivityResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def learner_keycloak_id(self) -> str:
        """Gets the learner_keycloak_id of this ActivityResponse.

        The keycloak GUID for the learner (the subject field of the OAUTH object)  # noqa: E501

        :return: The learner_keycloak_id of this ActivityResponse.
        :rtype: str
        """
        return self._learner_keycloak_id

    @learner_keycloak_id.setter
    def learner_keycloak_id(self, learner_keycloak_id: str):
        """Sets the learner_keycloak_id of this ActivityResponse.

        The keycloak GUID for the learner (the subject field of the OAUTH object)  # noqa: E501

        :param learner_keycloak_id: The learner_keycloak_id of this ActivityResponse.
        :type learner_keycloak_id: str
        """
        if learner_keycloak_id is None:
            raise ValueError("Invalid value for `learner_keycloak_id`, must not be `None`")  # noqa: E501

        self._learner_keycloak_id = learner_keycloak_id

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this ActivityResponse.

        The date and time this response was recorded  # noqa: E501

        :return: The timestamp of this ActivityResponse.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this ActivityResponse.

        The date and time this response was recorded  # noqa: E501

        :param timestamp: The timestamp of this ActivityResponse.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def popularity_rating(self) -> int:
        """Gets the popularity_rating of this ActivityResponse.

        Personal rating for the activity on a scale from 1 to 5  # noqa: E501

        :return: The popularity_rating of this ActivityResponse.
        :rtype: int
        """
        return self._popularity_rating

    @popularity_rating.setter
    def popularity_rating(self, popularity_rating: int):
        """Sets the popularity_rating of this ActivityResponse.

        Personal rating for the activity on a scale from 1 to 5  # noqa: E501

        :param popularity_rating: The popularity_rating of this ActivityResponse.
        :type popularity_rating: int
        """
        if popularity_rating is None:
            raise ValueError("Invalid value for `popularity_rating`, must not be `None`")  # noqa: E501

        self._popularity_rating = popularity_rating

    @property
    def emotion_rating(self) -> str:
        """Gets the emotion_rating of this ActivityResponse.

        Was the activity boring, confusing, frustrating, pleasant, epic, or neutral?  # noqa: E501

        :return: The emotion_rating of this ActivityResponse.
        :rtype: str
        """
        return self._emotion_rating

    @emotion_rating.setter
    def emotion_rating(self, emotion_rating: str):
        """Sets the emotion_rating of this ActivityResponse.

        Was the activity boring, confusing, frustrating, pleasant, epic, or neutral?  # noqa: E501

        :param emotion_rating: The emotion_rating of this ActivityResponse.
        :type emotion_rating: str
        """
        if emotion_rating is None:
            raise ValueError("Invalid value for `emotion_rating`, must not be `None`")  # noqa: E501

        self._emotion_rating = emotion_rating
