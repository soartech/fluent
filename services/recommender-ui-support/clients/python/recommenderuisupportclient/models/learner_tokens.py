# coding: utf-8

"""
    Recommender UI Support Service API

    This API is used to interact with the data stored in the Recommender UI Support Service database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from recommenderuisupportclient.models.activity_tokens import ActivityTokens  # noqa: F401,E501


class LearnerTokens(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'learner_keycloak_id': 'str',
        'tokens': 'list[ActivityTokens]'
    }

    attribute_map = {
        'learner_keycloak_id': 'learnerKeycloakId',
        'tokens': 'tokens'
    }

    def __init__(self, learner_keycloak_id=None, tokens=None):  # noqa: E501
        """LearnerTokens - a model defined in Swagger"""  # noqa: E501

        self._learner_keycloak_id = None
        self._tokens = None
        self.discriminator = None

        self.learner_keycloak_id = learner_keycloak_id
        if tokens is not None:
            self.tokens = tokens

    @property
    def learner_keycloak_id(self):
        """Gets the learner_keycloak_id of this LearnerTokens.  # noqa: E501

        The keycloak GUID for the learner (the subject field of the OAUTH object)  # noqa: E501

        :return: The learner_keycloak_id of this LearnerTokens.  # noqa: E501
        :rtype: str
        """
        return self._learner_keycloak_id

    @learner_keycloak_id.setter
    def learner_keycloak_id(self, learner_keycloak_id):
        """Sets the learner_keycloak_id of this LearnerTokens.

        The keycloak GUID for the learner (the subject field of the OAUTH object)  # noqa: E501

        :param learner_keycloak_id: The learner_keycloak_id of this LearnerTokens.  # noqa: E501
        :type: str
        """
        if learner_keycloak_id is None:
            raise ValueError("Invalid value for `learner_keycloak_id`, must not be `None`")  # noqa: E501

        self._learner_keycloak_id = learner_keycloak_id

    @property
    def tokens(self):
        """Gets the tokens of this LearnerTokens.  # noqa: E501

        Tokens earned by the learner  # noqa: E501

        :return: The tokens of this LearnerTokens.  # noqa: E501
        :rtype: list[ActivityTokens]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this LearnerTokens.

        Tokens earned by the learner  # noqa: E501

        :param tokens: The tokens of this LearnerTokens.  # noqa: E501
        :type: list[ActivityTokens]
        """

        self._tokens = tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearnerTokens):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
