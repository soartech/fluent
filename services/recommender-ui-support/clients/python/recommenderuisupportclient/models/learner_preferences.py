# coding: utf-8

"""
    Recommender UI Support Service API

    This API is used to interact with the data stored in the Recommnder UI Support Service database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LearnerPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'learner_id': 'str',
        'bla': 'str',
        'bla2': 'str',
        'bla3': 'str'
    }

    attribute_map = {
        'learner_id': 'learnerId',
        'bla': 'bla',
        'bla2': 'bla2',
        'bla3': 'bla3'
    }

    def __init__(self, learner_id=None, bla=None, bla2=None, bla3=None):  # noqa: E501
        """LearnerPreferences - a model defined in Swagger"""  # noqa: E501

        self._learner_id = None
        self._bla = None
        self._bla2 = None
        self._bla3 = None
        self.discriminator = None

        self.learner_id = learner_id
        self.bla = bla
        self.bla2 = bla2
        self.bla3 = bla3

    @property
    def learner_id(self):
        """Gets the learner_id of this LearnerPreferences.  # noqa: E501

        The mongo ID for the learner these preferences pertain to  # noqa: E501

        :return: The learner_id of this LearnerPreferences.  # noqa: E501
        :rtype: str
        """
        return self._learner_id

    @learner_id.setter
    def learner_id(self, learner_id):
        """Sets the learner_id of this LearnerPreferences.

        The mongo ID for the learner these preferences pertain to  # noqa: E501

        :param learner_id: The learner_id of this LearnerPreferences.  # noqa: E501
        :type: str
        """
        if learner_id is None:
            raise ValueError("Invalid value for `learner_id`, must not be `None`")  # noqa: E501

        self._learner_id = learner_id

    @property
    def bla(self):
        """Gets the bla of this LearnerPreferences.  # noqa: E501

        wow  # noqa: E501

        :return: The bla of this LearnerPreferences.  # noqa: E501
        :rtype: str
        """
        return self._bla

    @bla.setter
    def bla(self, bla):
        """Sets the bla of this LearnerPreferences.

        wow  # noqa: E501

        :param bla: The bla of this LearnerPreferences.  # noqa: E501
        :type: str
        """
        if bla is None:
            raise ValueError("Invalid value for `bla`, must not be `None`")  # noqa: E501

        self._bla = bla

    @property
    def bla2(self):
        """Gets the bla2 of this LearnerPreferences.  # noqa: E501

        wow2  # noqa: E501

        :return: The bla2 of this LearnerPreferences.  # noqa: E501
        :rtype: str
        """
        return self._bla2

    @bla2.setter
    def bla2(self, bla2):
        """Sets the bla2 of this LearnerPreferences.

        wow2  # noqa: E501

        :param bla2: The bla2 of this LearnerPreferences.  # noqa: E501
        :type: str
        """
        if bla2 is None:
            raise ValueError("Invalid value for `bla2`, must not be `None`")  # noqa: E501

        self._bla2 = bla2

    @property
    def bla3(self):
        """Gets the bla3 of this LearnerPreferences.  # noqa: E501

        wow3  # noqa: E501

        :return: The bla3 of this LearnerPreferences.  # noqa: E501
        :rtype: str
        """
        return self._bla3

    @bla3.setter
    def bla3(self, bla3):
        """Sets the bla3 of this LearnerPreferences.

        wow3  # noqa: E501

        :param bla3: The bla3 of this LearnerPreferences.  # noqa: E501
        :type: str
        """
        if bla3 is None:
            raise ValueError("Invalid value for `bla3`, must not be `None`")  # noqa: E501

        self._bla3 = bla3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearnerPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
