# coding: utf-8

"""
    Learner API

    This API is used to interact with the data stored in the TLA Learner Profile database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from learner_inferences_client.models.activity_attempt_counter import ActivityAttemptCounter  # noqa: F401,E501
from learner_inferences_client.models.competency_achievement import CompetencyAchievement  # noqa: F401,E501
from learner_inferences_client.models.competency_attempt_counter import CompetencyAttemptCounter  # noqa: F401,E501
from learner_inferences_client.models.goal import Goal  # noqa: F401,E501
from learner_inferences_client.models.mastery_estimate import MasteryEstimate  # noqa: F401,E501
from learner_inferences_client.models.mastery_probability import MasteryProbability  # noqa: F401,E501
from learner_inferences_client.models.person import Person  # noqa: F401,E501


class Learner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spouse': 'object',
        'funder': 'object',
        'colleague': 'object',
        'death_date': 'datetime',
        'member_of': 'object',
        'height': 'object',
        'work_location': 'object',
        'net_worth': 'object',
        'children': 'object',
        'job_title': 'str',
        'has_offer_catalog': 'object',
        'death_place': 'object',
        'global_location_number': 'str',
        'birth_place': 'object',
        'gender': 'str',
        'alumni_of': 'object',
        'home_location': 'object',
        'duns': 'str',
        'tax_id': 'str',
        'award': 'str',
        'birth_date': 'datetime',
        'makes_offer': 'object',
        'given_name': 'str',
        'contact_points': 'object',
        'awards': 'str',
        'family_name': 'str',
        'seeks': 'object',
        'sibling': 'object',
        'address': 'object',
        'performer_in': 'object',
        'honorific_prefix': 'str',
        'additional_name': 'str',
        'siblings': 'object',
        'telephone': 'str',
        'email': 'str',
        'weight': 'object',
        'contact_point': 'object',
        'parents': 'object',
        'naics': 'str',
        'has_pos': 'object',
        'parent': 'object',
        'owns': 'object',
        'affiliation': 'object',
        'publishing_principles': 'object',
        'sponsor': 'object',
        'isic_v4': 'str',
        'brand': 'object',
        'honorific_suffix': 'str',
        'vat_id': 'str',
        'nationality': 'object',
        'fax_number': 'str',
        'related_to': 'object',
        'follows': 'object',
        'knows': 'object',
        'works_for': 'object',
        'same_as': 'str',
        'url': 'str',
        'image': 'str',
        'additional_type': 'str',
        'name': 'str',
        'identifier': 'str',
        'potential_action': 'object',
        'main_entity_of_page': 'str',
        'description': 'str',
        'disambiguating_description': 'str',
        'alternate_name': 'str',
        'context': 'str',
        'type': 'str',
        'competency_attempt_counters': 'list[CompetencyAttemptCounter]',
        'goals': 'list[Goal]',
        'past_goals': 'list[Goal]',
        'competency_achievements': 'list[CompetencyAchievement]',
        'mastery_estimates': 'list[MasteryEstimate]',
        'past_mastery_estimates': 'list[MasteryEstimate]',
        'mastery_probabilities': 'list[MasteryProbability]',
        'current_activities': 'list[str]',
        'current_device_categories': 'list[str]',
        'current_platforms': 'list[str]',
        'bored': 'bool',
        'confused': 'bool',
        'frustrated': 'bool',
        'flow': 'bool',
        'eureka': 'bool',
        'activity_attempt_counters': 'list[ActivityAttemptCounter]',
        'last_activity_hard': 'bool',
        'last_activity_useful': 'bool'
    }

    attribute_map = {
        'spouse': 'spouse',
        'funder': 'funder',
        'colleague': 'colleague',
        'death_date': 'deathDate',
        'member_of': 'memberOf',
        'height': 'height',
        'work_location': 'workLocation',
        'net_worth': 'netWorth',
        'children': 'children',
        'job_title': 'jobTitle',
        'has_offer_catalog': 'hasOfferCatalog',
        'death_place': 'deathPlace',
        'global_location_number': 'globalLocationNumber',
        'birth_place': 'birthPlace',
        'gender': 'gender',
        'alumni_of': 'alumniOf',
        'home_location': 'homeLocation',
        'duns': 'duns',
        'tax_id': 'taxID',
        'award': 'award',
        'birth_date': 'birthDate',
        'makes_offer': 'makesOffer',
        'given_name': 'givenName',
        'contact_points': 'contactPoints',
        'awards': 'awards',
        'family_name': 'familyName',
        'seeks': 'seeks',
        'sibling': 'sibling',
        'address': 'address',
        'performer_in': 'performerIn',
        'honorific_prefix': 'honorificPrefix',
        'additional_name': 'additionalName',
        'siblings': 'siblings',
        'telephone': 'telephone',
        'email': 'email',
        'weight': 'weight',
        'contact_point': 'contactPoint',
        'parents': 'parents',
        'naics': 'naics',
        'has_pos': 'hasPOS',
        'parent': 'parent',
        'owns': 'owns',
        'affiliation': 'affiliation',
        'publishing_principles': 'publishingPrinciples',
        'sponsor': 'sponsor',
        'isic_v4': 'isicV4',
        'brand': 'brand',
        'honorific_suffix': 'honorificSuffix',
        'vat_id': 'vatID',
        'nationality': 'nationality',
        'fax_number': 'faxNumber',
        'related_to': 'relatedTo',
        'follows': 'follows',
        'knows': 'knows',
        'works_for': 'worksFor',
        'same_as': 'sameAs',
        'url': 'url',
        'image': 'image',
        'additional_type': 'additionalType',
        'name': 'name',
        'identifier': 'identifier',
        'potential_action': 'potentialAction',
        'main_entity_of_page': 'mainEntityOfPage',
        'description': 'description',
        'disambiguating_description': 'disambiguatingDescription',
        'alternate_name': 'alternateName',
        'context': '@context',
        'type': '@type',
        'competency_attempt_counters': 'competencyAttemptCounters',
        'goals': 'goals',
        'past_goals': 'pastGoals',
        'competency_achievements': 'competencyAchievements',
        'mastery_estimates': 'masteryEstimates',
        'past_mastery_estimates': 'pastMasteryEstimates',
        'mastery_probabilities': 'masteryProbabilities',
        'current_activities': 'currentActivities',
        'current_device_categories': 'currentDeviceCategories',
        'current_platforms': 'currentPlatforms',
        'bored': 'bored',
        'confused': 'confused',
        'frustrated': 'frustrated',
        'flow': 'flow',
        'eureka': 'eureka',
        'activity_attempt_counters': 'activityAttemptCounters',
        'last_activity_hard': 'lastActivityHard',
        'last_activity_useful': 'lastActivityUseful'
    }

    def __init__(self, spouse=None, funder=None, colleague=None, death_date=None, member_of=None, height=None, work_location=None, net_worth=None, children=None, job_title=None, has_offer_catalog=None, death_place=None, global_location_number=None, birth_place=None, gender=None, alumni_of=None, home_location=None, duns=None, tax_id=None, award=None, birth_date=None, makes_offer=None, given_name=None, contact_points=None, awards=None, family_name=None, seeks=None, sibling=None, address=None, performer_in=None, honorific_prefix=None, additional_name=None, siblings=None, telephone=None, email=None, weight=None, contact_point=None, parents=None, naics=None, has_pos=None, parent=None, owns=None, affiliation=None, publishing_principles=None, sponsor=None, isic_v4=None, brand=None, honorific_suffix=None, vat_id=None, nationality=None, fax_number=None, related_to=None, follows=None, knows=None, works_for=None, same_as=None, url=None, image=None, additional_type=None, name=None, identifier=None, potential_action=None, main_entity_of_page=None, description=None, disambiguating_description=None, alternate_name=None, context=None, type=None, competency_attempt_counters=None, goals=None, past_goals=None, competency_achievements=None, mastery_estimates=None, past_mastery_estimates=None, mastery_probabilities=None, current_activities=None, current_device_categories=None, current_platforms=None, bored=None, confused=None, frustrated=None, flow=None, eureka=None, activity_attempt_counters=None, last_activity_hard=None, last_activity_useful=None):  # noqa: E501
        """Learner - a model defined in Swagger"""  # noqa: E501

        self._spouse = None
        self._funder = None
        self._colleague = None
        self._death_date = None
        self._member_of = None
        self._height = None
        self._work_location = None
        self._net_worth = None
        self._children = None
        self._job_title = None
        self._has_offer_catalog = None
        self._death_place = None
        self._global_location_number = None
        self._birth_place = None
        self._gender = None
        self._alumni_of = None
        self._home_location = None
        self._duns = None
        self._tax_id = None
        self._award = None
        self._birth_date = None
        self._makes_offer = None
        self._given_name = None
        self._contact_points = None
        self._awards = None
        self._family_name = None
        self._seeks = None
        self._sibling = None
        self._address = None
        self._performer_in = None
        self._honorific_prefix = None
        self._additional_name = None
        self._siblings = None
        self._telephone = None
        self._email = None
        self._weight = None
        self._contact_point = None
        self._parents = None
        self._naics = None
        self._has_pos = None
        self._parent = None
        self._owns = None
        self._affiliation = None
        self._publishing_principles = None
        self._sponsor = None
        self._isic_v4 = None
        self._brand = None
        self._honorific_suffix = None
        self._vat_id = None
        self._nationality = None
        self._fax_number = None
        self._related_to = None
        self._follows = None
        self._knows = None
        self._works_for = None
        self._same_as = None
        self._url = None
        self._image = None
        self._additional_type = None
        self._name = None
        self._identifier = None
        self._potential_action = None
        self._main_entity_of_page = None
        self._description = None
        self._disambiguating_description = None
        self._alternate_name = None
        self._context = None
        self._type = None
        self._competency_attempt_counters = None
        self._goals = None
        self._past_goals = None
        self._competency_achievements = None
        self._mastery_estimates = None
        self._past_mastery_estimates = None
        self._mastery_probabilities = None
        self._current_activities = None
        self._current_device_categories = None
        self._current_platforms = None
        self._bored = None
        self._confused = None
        self._frustrated = None
        self._flow = None
        self._eureka = None
        self._activity_attempt_counters = None
        self._last_activity_hard = None
        self._last_activity_useful = None
        self.discriminator = None

        if spouse is not None:
            self.spouse = spouse
        if funder is not None:
            self.funder = funder
        if colleague is not None:
            self.colleague = colleague
        if death_date is not None:
            self.death_date = death_date
        if member_of is not None:
            self.member_of = member_of
        if height is not None:
            self.height = height
        if work_location is not None:
            self.work_location = work_location
        if net_worth is not None:
            self.net_worth = net_worth
        if children is not None:
            self.children = children
        if job_title is not None:
            self.job_title = job_title
        if has_offer_catalog is not None:
            self.has_offer_catalog = has_offer_catalog
        if death_place is not None:
            self.death_place = death_place
        if global_location_number is not None:
            self.global_location_number = global_location_number
        if birth_place is not None:
            self.birth_place = birth_place
        if gender is not None:
            self.gender = gender
        if alumni_of is not None:
            self.alumni_of = alumni_of
        if home_location is not None:
            self.home_location = home_location
        if duns is not None:
            self.duns = duns
        if tax_id is not None:
            self.tax_id = tax_id
        if award is not None:
            self.award = award
        if birth_date is not None:
            self.birth_date = birth_date
        if makes_offer is not None:
            self.makes_offer = makes_offer
        if given_name is not None:
            self.given_name = given_name
        if contact_points is not None:
            self.contact_points = contact_points
        if awards is not None:
            self.awards = awards
        if family_name is not None:
            self.family_name = family_name
        if seeks is not None:
            self.seeks = seeks
        if sibling is not None:
            self.sibling = sibling
        if address is not None:
            self.address = address
        if performer_in is not None:
            self.performer_in = performer_in
        if honorific_prefix is not None:
            self.honorific_prefix = honorific_prefix
        if additional_name is not None:
            self.additional_name = additional_name
        if siblings is not None:
            self.siblings = siblings
        if telephone is not None:
            self.telephone = telephone
        if email is not None:
            self.email = email
        if weight is not None:
            self.weight = weight
        if contact_point is not None:
            self.contact_point = contact_point
        if parents is not None:
            self.parents = parents
        if naics is not None:
            self.naics = naics
        if has_pos is not None:
            self.has_pos = has_pos
        if parent is not None:
            self.parent = parent
        if owns is not None:
            self.owns = owns
        if affiliation is not None:
            self.affiliation = affiliation
        if publishing_principles is not None:
            self.publishing_principles = publishing_principles
        if sponsor is not None:
            self.sponsor = sponsor
        if isic_v4 is not None:
            self.isic_v4 = isic_v4
        if brand is not None:
            self.brand = brand
        if honorific_suffix is not None:
            self.honorific_suffix = honorific_suffix
        if vat_id is not None:
            self.vat_id = vat_id
        if nationality is not None:
            self.nationality = nationality
        if fax_number is not None:
            self.fax_number = fax_number
        if related_to is not None:
            self.related_to = related_to
        if follows is not None:
            self.follows = follows
        if knows is not None:
            self.knows = knows
        if works_for is not None:
            self.works_for = works_for
        if same_as is not None:
            self.same_as = same_as
        if url is not None:
            self.url = url
        if image is not None:
            self.image = image
        if additional_type is not None:
            self.additional_type = additional_type
        self.name = name
        self.identifier = identifier
        if potential_action is not None:
            self.potential_action = potential_action
        if main_entity_of_page is not None:
            self.main_entity_of_page = main_entity_of_page
        if description is not None:
            self.description = description
        if disambiguating_description is not None:
            self.disambiguating_description = disambiguating_description
        if alternate_name is not None:
            self.alternate_name = alternate_name
        self.context = context
        self.type = type
        if competency_attempt_counters is not None:
            self.competency_attempt_counters = competency_attempt_counters
        if goals is not None:
            self.goals = goals
        if past_goals is not None:
            self.past_goals = past_goals
        if competency_achievements is not None:
            self.competency_achievements = competency_achievements
        if mastery_estimates is not None:
            self.mastery_estimates = mastery_estimates
        if past_mastery_estimates is not None:
            self.past_mastery_estimates = past_mastery_estimates
        if mastery_probabilities is not None:
            self.mastery_probabilities = mastery_probabilities
        if current_activities is not None:
            self.current_activities = current_activities
        if current_device_categories is not None:
            self.current_device_categories = current_device_categories
        if current_platforms is not None:
            self.current_platforms = current_platforms
        if bored is not None:
            self.bored = bored
        if confused is not None:
            self.confused = confused
        if frustrated is not None:
            self.frustrated = frustrated
        if flow is not None:
            self.flow = flow
        if eureka is not None:
            self.eureka = eureka
        if activity_attempt_counters is not None:
            self.activity_attempt_counters = activity_attempt_counters
        if last_activity_hard is not None:
            self.last_activity_hard = last_activity_hard
        if last_activity_useful is not None:
            self.last_activity_useful = last_activity_useful

    @property
    def spouse(self):
        """Gets the spouse of this Learner.  # noqa: E501

        The person s spouse.  # noqa: E501

        :return: The spouse of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._spouse

    @spouse.setter
    def spouse(self, spouse):
        """Sets the spouse of this Learner.

        The person s spouse.  # noqa: E501

        :param spouse: The spouse of this Learner.  # noqa: E501
        :type: object
        """

        self._spouse = spouse

    @property
    def funder(self):
        """Gets the funder of this Learner.  # noqa: E501

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :return: The funder of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder):
        """Sets the funder of this Learner.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :param funder: The funder of this Learner.  # noqa: E501
        :type: object
        """

        self._funder = funder

    @property
    def colleague(self):
        """Gets the colleague of this Learner.  # noqa: E501

        A colleague of the person. Supersedes colleagues.  # noqa: E501

        :return: The colleague of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._colleague

    @colleague.setter
    def colleague(self, colleague):
        """Sets the colleague of this Learner.

        A colleague of the person. Supersedes colleagues.  # noqa: E501

        :param colleague: The colleague of this Learner.  # noqa: E501
        :type: object
        """

        self._colleague = colleague

    @property
    def death_date(self):
        """Gets the death_date of this Learner.  # noqa: E501

        Date of death.  # noqa: E501

        :return: The death_date of this Learner.  # noqa: E501
        :rtype: datetime
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this Learner.

        Date of death.  # noqa: E501

        :param death_date: The death_date of this Learner.  # noqa: E501
        :type: datetime
        """

        self._death_date = death_date

    @property
    def member_of(self):
        """Gets the member_of of this Learner.  # noqa: E501

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :return: The member_of of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this Learner.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :param member_of: The member_of of this Learner.  # noqa: E501
        :type: object
        """

        self._member_of = member_of

    @property
    def height(self):
        """Gets the height of this Learner.  # noqa: E501

        The height of the item.  # noqa: E501

        :return: The height of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Learner.

        The height of the item.  # noqa: E501

        :param height: The height of this Learner.  # noqa: E501
        :type: object
        """

        self._height = height

    @property
    def work_location(self):
        """Gets the work_location of this Learner.  # noqa: E501

        A contact location for a person s place of work.  # noqa: E501

        :return: The work_location of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._work_location

    @work_location.setter
    def work_location(self, work_location):
        """Sets the work_location of this Learner.

        A contact location for a person s place of work.  # noqa: E501

        :param work_location: The work_location of this Learner.  # noqa: E501
        :type: object
        """

        self._work_location = work_location

    @property
    def net_worth(self):
        """Gets the net_worth of this Learner.  # noqa: E501

        The total financial value of the person as calculated by subtracting assets from liabilities.  # noqa: E501

        :return: The net_worth of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._net_worth

    @net_worth.setter
    def net_worth(self, net_worth):
        """Sets the net_worth of this Learner.

        The total financial value of the person as calculated by subtracting assets from liabilities.  # noqa: E501

        :param net_worth: The net_worth of this Learner.  # noqa: E501
        :type: object
        """

        self._net_worth = net_worth

    @property
    def children(self):
        """Gets the children of this Learner.  # noqa: E501

        A child of the person.  # noqa: E501

        :return: The children of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Learner.

        A child of the person.  # noqa: E501

        :param children: The children of this Learner.  # noqa: E501
        :type: object
        """

        self._children = children

    @property
    def job_title(self):
        """Gets the job_title of this Learner.  # noqa: E501

        The job title of the person (for example, Financial Manager).  # noqa: E501

        :return: The job_title of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Learner.

        The job title of the person (for example, Financial Manager).  # noqa: E501

        :param job_title: The job_title of this Learner.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def has_offer_catalog(self):
        """Gets the has_offer_catalog of this Learner.  # noqa: E501

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :return: The has_offer_catalog of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._has_offer_catalog

    @has_offer_catalog.setter
    def has_offer_catalog(self, has_offer_catalog):
        """Sets the has_offer_catalog of this Learner.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :param has_offer_catalog: The has_offer_catalog of this Learner.  # noqa: E501
        :type: object
        """

        self._has_offer_catalog = has_offer_catalog

    @property
    def death_place(self):
        """Gets the death_place of this Learner.  # noqa: E501

        The place where the person died.  # noqa: E501

        :return: The death_place of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._death_place

    @death_place.setter
    def death_place(self, death_place):
        """Sets the death_place of this Learner.

        The place where the person died.  # noqa: E501

        :param death_place: The death_place of this Learner.  # noqa: E501
        :type: object
        """

        self._death_place = death_place

    @property
    def global_location_number(self):
        """Gets the global_location_number of this Learner.  # noqa: E501

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :return: The global_location_number of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._global_location_number

    @global_location_number.setter
    def global_location_number(self, global_location_number):
        """Sets the global_location_number of this Learner.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :param global_location_number: The global_location_number of this Learner.  # noqa: E501
        :type: str
        """

        self._global_location_number = global_location_number

    @property
    def birth_place(self):
        """Gets the birth_place of this Learner.  # noqa: E501

        The place where the person was born.  # noqa: E501

        :return: The birth_place of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this Learner.

        The place where the person was born.  # noqa: E501

        :param birth_place: The birth_place of this Learner.  # noqa: E501
        :type: object
        """

        self._birth_place = birth_place

    @property
    def gender(self):
        """Gets the gender of this Learner.  # noqa: E501

        Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.  # noqa: E501

        :return: The gender of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Learner.

        Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.  # noqa: E501

        :param gender: The gender of this Learner.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def alumni_of(self):
        """Gets the alumni_of of this Learner.  # noqa: E501

        An organization that the person is an alumni of.  # noqa: E501

        :return: The alumni_of of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._alumni_of

    @alumni_of.setter
    def alumni_of(self, alumni_of):
        """Sets the alumni_of of this Learner.

        An organization that the person is an alumni of.  # noqa: E501

        :param alumni_of: The alumni_of of this Learner.  # noqa: E501
        :type: object
        """

        self._alumni_of = alumni_of

    @property
    def home_location(self):
        """Gets the home_location of this Learner.  # noqa: E501

        A contact location for a person s residence.  # noqa: E501

        :return: The home_location of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location):
        """Sets the home_location of this Learner.

        A contact location for a person s residence.  # noqa: E501

        :param home_location: The home_location of this Learner.  # noqa: E501
        :type: object
        """

        self._home_location = home_location

    @property
    def duns(self):
        """Gets the duns of this Learner.  # noqa: E501

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :return: The duns of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._duns

    @duns.setter
    def duns(self, duns):
        """Sets the duns of this Learner.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :param duns: The duns of this Learner.  # noqa: E501
        :type: str
        """

        self._duns = duns

    @property
    def tax_id(self):
        """Gets the tax_id of this Learner.  # noqa: E501

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :return: The tax_id of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Learner.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :param tax_id: The tax_id of this Learner.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def award(self):
        """Gets the award of this Learner.  # noqa: E501

        An award won by or for this item.  # noqa: E501

        :return: The award of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this Learner.

        An award won by or for this item.  # noqa: E501

        :param award: The award of this Learner.  # noqa: E501
        :type: str
        """

        self._award = award

    @property
    def birth_date(self):
        """Gets the birth_date of this Learner.  # noqa: E501

        Date of birth.  # noqa: E501

        :return: The birth_date of this Learner.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Learner.

        Date of birth.  # noqa: E501

        :param birth_date: The birth_date of this Learner.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def makes_offer(self):
        """Gets the makes_offer of this Learner.  # noqa: E501

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :return: The makes_offer of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._makes_offer

    @makes_offer.setter
    def makes_offer(self, makes_offer):
        """Sets the makes_offer of this Learner.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :param makes_offer: The makes_offer of this Learner.  # noqa: E501
        :type: object
        """

        self._makes_offer = makes_offer

    @property
    def given_name(self):
        """Gets the given_name of this Learner.  # noqa: E501

        Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.  # noqa: E501

        :return: The given_name of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Learner.

        Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.  # noqa: E501

        :param given_name: The given_name of this Learner.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def contact_points(self):
        """Gets the contact_points of this Learner.  # noqa: E501

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_points of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._contact_points

    @contact_points.setter
    def contact_points(self, contact_points):
        """Sets the contact_points of this Learner.

        A contact point for a person or organization.  # noqa: E501

        :param contact_points: The contact_points of this Learner.  # noqa: E501
        :type: object
        """

        self._contact_points = contact_points

    @property
    def awards(self):
        """Gets the awards of this Learner.  # noqa: E501

        Awards won by or for this item.  # noqa: E501

        :return: The awards of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this Learner.

        Awards won by or for this item.  # noqa: E501

        :param awards: The awards of this Learner.  # noqa: E501
        :type: str
        """

        self._awards = awards

    @property
    def family_name(self):
        """Gets the family_name of this Learner.  # noqa: E501

        Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.  # noqa: E501

        :return: The family_name of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Learner.

        Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.  # noqa: E501

        :param family_name: The family_name of this Learner.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def seeks(self):
        """Gets the seeks of this Learner.  # noqa: E501

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :return: The seeks of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._seeks

    @seeks.setter
    def seeks(self, seeks):
        """Sets the seeks of this Learner.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :param seeks: The seeks of this Learner.  # noqa: E501
        :type: object
        """

        self._seeks = seeks

    @property
    def sibling(self):
        """Gets the sibling of this Learner.  # noqa: E501

        A sibling of the person.  # noqa: E501

        :return: The sibling of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._sibling

    @sibling.setter
    def sibling(self, sibling):
        """Sets the sibling of this Learner.

        A sibling of the person.  # noqa: E501

        :param sibling: The sibling of this Learner.  # noqa: E501
        :type: object
        """

        self._sibling = sibling

    @property
    def address(self):
        """Gets the address of this Learner.  # noqa: E501

        Physical address of the item.  # noqa: E501

        :return: The address of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Learner.

        Physical address of the item.  # noqa: E501

        :param address: The address of this Learner.  # noqa: E501
        :type: object
        """

        self._address = address

    @property
    def performer_in(self):
        """Gets the performer_in of this Learner.  # noqa: E501

        Event that this person is a performer or participant in.  # noqa: E501

        :return: The performer_in of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._performer_in

    @performer_in.setter
    def performer_in(self, performer_in):
        """Sets the performer_in of this Learner.

        Event that this person is a performer or participant in.  # noqa: E501

        :param performer_in: The performer_in of this Learner.  # noqa: E501
        :type: object
        """

        self._performer_in = performer_in

    @property
    def honorific_prefix(self):
        """Gets the honorific_prefix of this Learner.  # noqa: E501

        An honorific prefix preceding a Person s name such as Dr/Mrs/Mr.  # noqa: E501

        :return: The honorific_prefix of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._honorific_prefix

    @honorific_prefix.setter
    def honorific_prefix(self, honorific_prefix):
        """Sets the honorific_prefix of this Learner.

        An honorific prefix preceding a Person s name such as Dr/Mrs/Mr.  # noqa: E501

        :param honorific_prefix: The honorific_prefix of this Learner.  # noqa: E501
        :type: str
        """

        self._honorific_prefix = honorific_prefix

    @property
    def additional_name(self):
        """Gets the additional_name of this Learner.  # noqa: E501

        An additional name for a Person, can be used for a middle name.  # noqa: E501

        :return: The additional_name of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._additional_name

    @additional_name.setter
    def additional_name(self, additional_name):
        """Sets the additional_name of this Learner.

        An additional name for a Person, can be used for a middle name.  # noqa: E501

        :param additional_name: The additional_name of this Learner.  # noqa: E501
        :type: str
        """

        self._additional_name = additional_name

    @property
    def siblings(self):
        """Gets the siblings of this Learner.  # noqa: E501

        A sibling of the person.  # noqa: E501

        :return: The siblings of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._siblings

    @siblings.setter
    def siblings(self, siblings):
        """Sets the siblings of this Learner.

        A sibling of the person.  # noqa: E501

        :param siblings: The siblings of this Learner.  # noqa: E501
        :type: object
        """

        self._siblings = siblings

    @property
    def telephone(self):
        """Gets the telephone of this Learner.  # noqa: E501

        The telephone number.  # noqa: E501

        :return: The telephone of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Learner.

        The telephone number.  # noqa: E501

        :param telephone: The telephone of this Learner.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def email(self):
        """Gets the email of this Learner.  # noqa: E501

        Email address.  # noqa: E501

        :return: The email of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Learner.

        Email address.  # noqa: E501

        :param email: The email of this Learner.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def weight(self):
        """Gets the weight of this Learner.  # noqa: E501

        The weight of the product or person.  # noqa: E501

        :return: The weight of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Learner.

        The weight of the product or person.  # noqa: E501

        :param weight: The weight of this Learner.  # noqa: E501
        :type: object
        """

        self._weight = weight

    @property
    def contact_point(self):
        """Gets the contact_point of this Learner.  # noqa: E501

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_point of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point):
        """Sets the contact_point of this Learner.

        A contact point for a person or organization.  # noqa: E501

        :param contact_point: The contact_point of this Learner.  # noqa: E501
        :type: object
        """

        self._contact_point = contact_point

    @property
    def parents(self):
        """Gets the parents of this Learner.  # noqa: E501

        A parents of the person.  # noqa: E501

        :return: The parents of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Learner.

        A parents of the person.  # noqa: E501

        :param parents: The parents of this Learner.  # noqa: E501
        :type: object
        """

        self._parents = parents

    @property
    def naics(self):
        """Gets the naics of this Learner.  # noqa: E501

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :return: The naics of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._naics

    @naics.setter
    def naics(self, naics):
        """Sets the naics of this Learner.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :param naics: The naics of this Learner.  # noqa: E501
        :type: str
        """

        self._naics = naics

    @property
    def has_pos(self):
        """Gets the has_pos of this Learner.  # noqa: E501

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :return: The has_pos of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._has_pos

    @has_pos.setter
    def has_pos(self, has_pos):
        """Sets the has_pos of this Learner.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :param has_pos: The has_pos of this Learner.  # noqa: E501
        :type: object
        """

        self._has_pos = has_pos

    @property
    def parent(self):
        """Gets the parent of this Learner.  # noqa: E501

        A parent of this person.  # noqa: E501

        :return: The parent of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Learner.

        A parent of this person.  # noqa: E501

        :param parent: The parent of this Learner.  # noqa: E501
        :type: object
        """

        self._parent = parent

    @property
    def owns(self):
        """Gets the owns of this Learner.  # noqa: E501

        Products owned by the organization or person.  # noqa: E501

        :return: The owns of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._owns

    @owns.setter
    def owns(self, owns):
        """Sets the owns of this Learner.

        Products owned by the organization or person.  # noqa: E501

        :param owns: The owns of this Learner.  # noqa: E501
        :type: object
        """

        self._owns = owns

    @property
    def affiliation(self):
        """Gets the affiliation of this Learner.  # noqa: E501

        An organization that this person is affiliated with. For example, a school/university, a club, or a team.  # noqa: E501

        :return: The affiliation of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this Learner.

        An organization that this person is affiliated with. For example, a school/university, a club, or a team.  # noqa: E501

        :param affiliation: The affiliation of this Learner.  # noqa: E501
        :type: object
        """

        self._affiliation = affiliation

    @property
    def publishing_principles(self):
        """Gets the publishing_principles of this Learner.  # noqa: E501

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :return: The publishing_principles of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._publishing_principles

    @publishing_principles.setter
    def publishing_principles(self, publishing_principles):
        """Sets the publishing_principles of this Learner.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :param publishing_principles: The publishing_principles of this Learner.  # noqa: E501
        :type: object
        """

        self._publishing_principles = publishing_principles

    @property
    def sponsor(self):
        """Gets the sponsor of this Learner.  # noqa: E501

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :return: The sponsor of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this Learner.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :param sponsor: The sponsor of this Learner.  # noqa: E501
        :type: object
        """

        self._sponsor = sponsor

    @property
    def isic_v4(self):
        """Gets the isic_v4 of this Learner.  # noqa: E501

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :return: The isic_v4 of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._isic_v4

    @isic_v4.setter
    def isic_v4(self, isic_v4):
        """Sets the isic_v4 of this Learner.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :param isic_v4: The isic_v4 of this Learner.  # noqa: E501
        :type: str
        """

        self._isic_v4 = isic_v4

    @property
    def brand(self):
        """Gets the brand of this Learner.  # noqa: E501

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :return: The brand of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Learner.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :param brand: The brand of this Learner.  # noqa: E501
        :type: object
        """

        self._brand = brand

    @property
    def honorific_suffix(self):
        """Gets the honorific_suffix of this Learner.  # noqa: E501

        An honorific suffix preceding a Person s name such as M.D. /PhD/MSCSW.  # noqa: E501

        :return: The honorific_suffix of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._honorific_suffix

    @honorific_suffix.setter
    def honorific_suffix(self, honorific_suffix):
        """Sets the honorific_suffix of this Learner.

        An honorific suffix preceding a Person s name such as M.D. /PhD/MSCSW.  # noqa: E501

        :param honorific_suffix: The honorific_suffix of this Learner.  # noqa: E501
        :type: str
        """

        self._honorific_suffix = honorific_suffix

    @property
    def vat_id(self):
        """Gets the vat_id of this Learner.  # noqa: E501

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :return: The vat_id of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this Learner.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :param vat_id: The vat_id of this Learner.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    @property
    def nationality(self):
        """Gets the nationality of this Learner.  # noqa: E501

        Nationality of the person.  # noqa: E501

        :return: The nationality of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Learner.

        Nationality of the person.  # noqa: E501

        :param nationality: The nationality of this Learner.  # noqa: E501
        :type: object
        """

        self._nationality = nationality

    @property
    def fax_number(self):
        """Gets the fax_number of this Learner.  # noqa: E501

        The fax number.  # noqa: E501

        :return: The fax_number of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this Learner.

        The fax number.  # noqa: E501

        :param fax_number: The fax_number of this Learner.  # noqa: E501
        :type: str
        """

        self._fax_number = fax_number

    @property
    def related_to(self):
        """Gets the related_to of this Learner.  # noqa: E501

        The most generic familial relation.  # noqa: E501

        :return: The related_to of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._related_to

    @related_to.setter
    def related_to(self, related_to):
        """Sets the related_to of this Learner.

        The most generic familial relation.  # noqa: E501

        :param related_to: The related_to of this Learner.  # noqa: E501
        :type: object
        """

        self._related_to = related_to

    @property
    def follows(self):
        """Gets the follows of this Learner.  # noqa: E501

        The most generic uni-directional social relation.  # noqa: E501

        :return: The follows of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._follows

    @follows.setter
    def follows(self, follows):
        """Sets the follows of this Learner.

        The most generic uni-directional social relation.  # noqa: E501

        :param follows: The follows of this Learner.  # noqa: E501
        :type: object
        """

        self._follows = follows

    @property
    def knows(self):
        """Gets the knows of this Learner.  # noqa: E501

        The most generic bi-directional social/work relation.  # noqa: E501

        :return: The knows of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._knows

    @knows.setter
    def knows(self, knows):
        """Sets the knows of this Learner.

        The most generic bi-directional social/work relation.  # noqa: E501

        :param knows: The knows of this Learner.  # noqa: E501
        :type: object
        """

        self._knows = knows

    @property
    def works_for(self):
        """Gets the works_for of this Learner.  # noqa: E501

        Organizations that the person works for.  # noqa: E501

        :return: The works_for of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._works_for

    @works_for.setter
    def works_for(self, works_for):
        """Sets the works_for of this Learner.

        Organizations that the person works for.  # noqa: E501

        :param works_for: The works_for of this Learner.  # noqa: E501
        :type: object
        """

        self._works_for = works_for

    @property
    def same_as(self):
        """Gets the same_as of this Learner.  # noqa: E501

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this Learner.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this Learner.  # noqa: E501
        :type: str
        """

        self._same_as = same_as

    @property
    def url(self):
        """Gets the url of this Learner.  # noqa: E501

        URL of the item.  # noqa: E501

        :return: The url of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Learner.

        URL of the item.  # noqa: E501

        :param url: The url of this Learner.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """Gets the image of this Learner.  # noqa: E501

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Learner.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this Learner.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def additional_type(self):
        """Gets the additional_type of this Learner.  # noqa: E501

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type):
        """Sets the additional_type of this Learner.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this Learner.  # noqa: E501
        :type: str
        """

        self._additional_type = additional_type

    @property
    def name(self):
        """Gets the name of this Learner.  # noqa: E501

        The full name of the learner.  # noqa: E501

        :return: The name of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Learner.

        The full name of the learner.  # noqa: E501

        :param name: The name of this Learner.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this Learner.  # noqa: E501

        The string that identifies the learner. For the 2018 prototype, this will be the Keycloak-generated ID.  # noqa: E501

        :return: The identifier of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Learner.

        The string that identifies the learner. For the 2018 prototype, this will be the Keycloak-generated ID.  # noqa: E501

        :param identifier: The identifier of this Learner.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def potential_action(self):
        """Gets the potential_action of this Learner.  # noqa: E501

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this Learner.  # noqa: E501
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this Learner.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this Learner.  # noqa: E501
        :type: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self):
        """Gets the main_entity_of_page of this Learner.  # noqa: E501

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page):
        """Sets the main_entity_of_page of this Learner.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this Learner.  # noqa: E501
        :type: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self):
        """Gets the description of this Learner.  # noqa: E501

        A description of the item.  # noqa: E501

        :return: The description of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Learner.

        A description of the item.  # noqa: E501

        :param description: The description of this Learner.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disambiguating_description(self):
        """Gets the disambiguating_description of this Learner.  # noqa: E501

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description):
        """Sets the disambiguating_description of this Learner.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this Learner.  # noqa: E501
        :type: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self):
        """Gets the alternate_name of this Learner.  # noqa: E501

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this Learner.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this Learner.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def context(self):
        """Gets the context of this Learner.  # noqa: E501

        The constant link in this property should return file tla-declarations.jsonld. The value of this field will always be \"https://tla.adl.net/declarations\"  # noqa: E501

        :return: The context of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Learner.

        The constant link in this property should return file tla-declarations.jsonld. The value of this field will always be \"https://tla.adl.net/declarations\"  # noqa: E501

        :param context: The context of this Learner.  # noqa: E501
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def type(self):
        """Gets the type of this Learner.  # noqa: E501

        The value of this field will always be \"Learner\"  # noqa: E501

        :return: The type of this Learner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Learner.

        The value of this field will always be \"Learner\"  # noqa: E501

        :param type: The type of this Learner.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def competency_attempt_counters(self):
        """Gets the competency_attempt_counters of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The competency_attempt_counters of this Learner.  # noqa: E501
        :rtype: list[CompetencyAttemptCounter]
        """
        return self._competency_attempt_counters

    @competency_attempt_counters.setter
    def competency_attempt_counters(self, competency_attempt_counters):
        """Sets the competency_attempt_counters of this Learner.

        TODO  # noqa: E501

        :param competency_attempt_counters: The competency_attempt_counters of this Learner.  # noqa: E501
        :type: list[CompetencyAttemptCounter]
        """

        self._competency_attempt_counters = competency_attempt_counters

    @property
    def goals(self):
        """Gets the goals of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The goals of this Learner.  # noqa: E501
        :rtype: list[Goal]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this Learner.

        TODO  # noqa: E501

        :param goals: The goals of this Learner.  # noqa: E501
        :type: list[Goal]
        """

        self._goals = goals

    @property
    def past_goals(self):
        """Gets the past_goals of this Learner.  # noqa: E501


        :return: The past_goals of this Learner.  # noqa: E501
        :rtype: list[Goal]
        """
        return self._past_goals

    @past_goals.setter
    def past_goals(self, past_goals):
        """Sets the past_goals of this Learner.


        :param past_goals: The past_goals of this Learner.  # noqa: E501
        :type: list[Goal]
        """

        self._past_goals = past_goals

    @property
    def competency_achievements(self):
        """Gets the competency_achievements of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The competency_achievements of this Learner.  # noqa: E501
        :rtype: list[CompetencyAchievement]
        """
        return self._competency_achievements

    @competency_achievements.setter
    def competency_achievements(self, competency_achievements):
        """Sets the competency_achievements of this Learner.

        TODO  # noqa: E501

        :param competency_achievements: The competency_achievements of this Learner.  # noqa: E501
        :type: list[CompetencyAchievement]
        """

        self._competency_achievements = competency_achievements

    @property
    def mastery_estimates(self):
        """Gets the mastery_estimates of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The mastery_estimates of this Learner.  # noqa: E501
        :rtype: list[MasteryEstimate]
        """
        return self._mastery_estimates

    @mastery_estimates.setter
    def mastery_estimates(self, mastery_estimates):
        """Sets the mastery_estimates of this Learner.

        TODO  # noqa: E501

        :param mastery_estimates: The mastery_estimates of this Learner.  # noqa: E501
        :type: list[MasteryEstimate]
        """

        self._mastery_estimates = mastery_estimates

    @property
    def past_mastery_estimates(self):
        """Gets the past_mastery_estimates of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The past_mastery_estimates of this Learner.  # noqa: E501
        :rtype: list[MasteryEstimate]
        """
        return self._past_mastery_estimates

    @past_mastery_estimates.setter
    def past_mastery_estimates(self, past_mastery_estimates):
        """Sets the past_mastery_estimates of this Learner.

        TODO  # noqa: E501

        :param past_mastery_estimates: The past_mastery_estimates of this Learner.  # noqa: E501
        :type: list[MasteryEstimate]
        """

        self._past_mastery_estimates = past_mastery_estimates

    @property
    def mastery_probabilities(self):
        """Gets the mastery_probabilities of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The mastery_probabilities of this Learner.  # noqa: E501
        :rtype: list[MasteryProbability]
        """
        return self._mastery_probabilities

    @mastery_probabilities.setter
    def mastery_probabilities(self, mastery_probabilities):
        """Sets the mastery_probabilities of this Learner.

        TODO  # noqa: E501

        :param mastery_probabilities: The mastery_probabilities of this Learner.  # noqa: E501
        :type: list[MasteryProbability]
        """

        self._mastery_probabilities = mastery_probabilities

    @property
    def current_activities(self):
        """Gets the current_activities of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The current_activities of this Learner.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_activities

    @current_activities.setter
    def current_activities(self, current_activities):
        """Sets the current_activities of this Learner.

        TODO  # noqa: E501

        :param current_activities: The current_activities of this Learner.  # noqa: E501
        :type: list[str]
        """

        self._current_activities = current_activities

    @property
    def current_device_categories(self):
        """Gets the current_device_categories of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The current_device_categories of this Learner.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_device_categories

    @current_device_categories.setter
    def current_device_categories(self, current_device_categories):
        """Sets the current_device_categories of this Learner.

        TODO  # noqa: E501

        :param current_device_categories: The current_device_categories of this Learner.  # noqa: E501
        :type: list[str]
        """

        self._current_device_categories = current_device_categories

    @property
    def current_platforms(self):
        """Gets the current_platforms of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The current_platforms of this Learner.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_platforms

    @current_platforms.setter
    def current_platforms(self, current_platforms):
        """Sets the current_platforms of this Learner.

        TODO  # noqa: E501

        :param current_platforms: The current_platforms of this Learner.  # noqa: E501
        :type: list[str]
        """

        self._current_platforms = current_platforms

    @property
    def bored(self):
        """Gets the bored of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The bored of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._bored

    @bored.setter
    def bored(self, bored):
        """Sets the bored of this Learner.

        TODO  # noqa: E501

        :param bored: The bored of this Learner.  # noqa: E501
        :type: bool
        """

        self._bored = bored

    @property
    def confused(self):
        """Gets the confused of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The confused of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._confused

    @confused.setter
    def confused(self, confused):
        """Sets the confused of this Learner.

        TODO  # noqa: E501

        :param confused: The confused of this Learner.  # noqa: E501
        :type: bool
        """

        self._confused = confused

    @property
    def frustrated(self):
        """Gets the frustrated of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The frustrated of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._frustrated

    @frustrated.setter
    def frustrated(self, frustrated):
        """Sets the frustrated of this Learner.

        TODO  # noqa: E501

        :param frustrated: The frustrated of this Learner.  # noqa: E501
        :type: bool
        """

        self._frustrated = frustrated

    @property
    def flow(self):
        """Gets the flow of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The flow of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this Learner.

        TODO  # noqa: E501

        :param flow: The flow of this Learner.  # noqa: E501
        :type: bool
        """

        self._flow = flow

    @property
    def eureka(self):
        """Gets the eureka of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The eureka of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._eureka

    @eureka.setter
    def eureka(self, eureka):
        """Sets the eureka of this Learner.

        TODO  # noqa: E501

        :param eureka: The eureka of this Learner.  # noqa: E501
        :type: bool
        """

        self._eureka = eureka

    @property
    def activity_attempt_counters(self):
        """Gets the activity_attempt_counters of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The activity_attempt_counters of this Learner.  # noqa: E501
        :rtype: list[ActivityAttemptCounter]
        """
        return self._activity_attempt_counters

    @activity_attempt_counters.setter
    def activity_attempt_counters(self, activity_attempt_counters):
        """Sets the activity_attempt_counters of this Learner.

        TODO  # noqa: E501

        :param activity_attempt_counters: The activity_attempt_counters of this Learner.  # noqa: E501
        :type: list[ActivityAttemptCounter]
        """

        self._activity_attempt_counters = activity_attempt_counters

    @property
    def last_activity_hard(self):
        """Gets the last_activity_hard of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The last_activity_hard of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._last_activity_hard

    @last_activity_hard.setter
    def last_activity_hard(self, last_activity_hard):
        """Sets the last_activity_hard of this Learner.

        TODO  # noqa: E501

        :param last_activity_hard: The last_activity_hard of this Learner.  # noqa: E501
        :type: bool
        """

        self._last_activity_hard = last_activity_hard

    @property
    def last_activity_useful(self):
        """Gets the last_activity_useful of this Learner.  # noqa: E501

        TODO  # noqa: E501

        :return: The last_activity_useful of this Learner.  # noqa: E501
        :rtype: bool
        """
        return self._last_activity_useful

    @last_activity_useful.setter
    def last_activity_useful(self, last_activity_useful):
        """Sets the last_activity_useful of this Learner.

        TODO  # noqa: E501

        :param last_activity_useful: The last_activity_useful of this Learner.  # noqa: E501
        :type: bool
        """

        self._last_activity_useful = last_activity_useful

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Learner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
