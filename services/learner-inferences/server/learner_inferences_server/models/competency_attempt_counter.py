# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from learner_inferences_server.models.base_model_ import Model
from learner_inferences_server import util


class CompetencyAttemptCounter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, type: str=None, competency_id: str=None, attempts: float=None, last_attempt_date_time: datetime=None):  # noqa: E501
        """CompetencyAttemptCounter - a model defined in Swagger

        :param context: The context of this CompetencyAttemptCounter.  # noqa: E501
        :type context: str
        :param type: The type of this CompetencyAttemptCounter.  # noqa: E501
        :type type: str
        :param competency_id: The competency_id of this CompetencyAttemptCounter.  # noqa: E501
        :type competency_id: str
        :param attempts: The attempts of this CompetencyAttemptCounter.  # noqa: E501
        :type attempts: float
        :param last_attempt_date_time: The last_attempt_date_time of this CompetencyAttemptCounter.  # noqa: E501
        :type last_attempt_date_time: datetime
        """
        self.swagger_types = {
            'context': str,
            'type': str,
            'competency_id': str,
            'attempts': float,
            'last_attempt_date_time': datetime
        }

        self.attribute_map = {
            'context': '@context',
            'type': '@type',
            'competency_id': 'competencyId',
            'attempts': 'attempts',
            'last_attempt_date_time': 'lastAttemptDateTime'
        }

        self._context = context
        self._type = type
        self._competency_id = competency_id
        self._attempts = attempts
        self._last_attempt_date_time = last_attempt_date_time

    @classmethod
    def from_dict(cls, dikt) -> 'CompetencyAttemptCounter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompetencyAttemptCounter of this CompetencyAttemptCounter.  # noqa: E501
        :rtype: CompetencyAttemptCounter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> str:
        """Gets the context of this CompetencyAttemptCounter.

        The constant link in this property should return file tla-declarations.jsonld. The value of this field will always be \"https://tla.adl.net/declarations\".  # noqa: E501

        :return: The context of this CompetencyAttemptCounter.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this CompetencyAttemptCounter.

        The constant link in this property should return file tla-declarations.jsonld. The value of this field will always be \"https://tla.adl.net/declarations\".  # noqa: E501

        :param context: The context of this CompetencyAttemptCounter.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def type(self) -> str:
        """Gets the type of this CompetencyAttemptCounter.

        The value of this field will always be \"CompetencyAttemptCounter\".  # noqa: E501

        :return: The type of this CompetencyAttemptCounter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CompetencyAttemptCounter.

        The value of this field will always be \"CompetencyAttemptCounter\".  # noqa: E501

        :param type: The type of this CompetencyAttemptCounter.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def competency_id(self) -> str:
        """Gets the competency_id of this CompetencyAttemptCounter.

        TODO  # noqa: E501

        :return: The competency_id of this CompetencyAttemptCounter.
        :rtype: str
        """
        return self._competency_id

    @competency_id.setter
    def competency_id(self, competency_id: str):
        """Sets the competency_id of this CompetencyAttemptCounter.

        TODO  # noqa: E501

        :param competency_id: The competency_id of this CompetencyAttemptCounter.
        :type competency_id: str
        """
        if competency_id is None:
            raise ValueError("Invalid value for `competency_id`, must not be `None`")  # noqa: E501

        self._competency_id = competency_id

    @property
    def attempts(self) -> float:
        """Gets the attempts of this CompetencyAttemptCounter.


        :return: The attempts of this CompetencyAttemptCounter.
        :rtype: float
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts: float):
        """Sets the attempts of this CompetencyAttemptCounter.


        :param attempts: The attempts of this CompetencyAttemptCounter.
        :type attempts: float
        """
        if attempts is None:
            raise ValueError("Invalid value for `attempts`, must not be `None`")  # noqa: E501

        self._attempts = attempts

    @property
    def last_attempt_date_time(self) -> datetime:
        """Gets the last_attempt_date_time of this CompetencyAttemptCounter.

        TODO  # noqa: E501

        :return: The last_attempt_date_time of this CompetencyAttemptCounter.
        :rtype: datetime
        """
        return self._last_attempt_date_time

    @last_attempt_date_time.setter
    def last_attempt_date_time(self, last_attempt_date_time: datetime):
        """Sets the last_attempt_date_time of this CompetencyAttemptCounter.

        TODO  # noqa: E501

        :param last_attempt_date_time: The last_attempt_date_time of this CompetencyAttemptCounter.
        :type last_attempt_date_time: datetime
        """

        self._last_attempt_date_time = last_attempt_date_time
