# coding: utf-8

"""
    Asset API

    This API is used to interact with the data stored in the TLA Activity Index database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_area': 'object',
        'funder': 'object',
        'area_served': 'object',
        'member_of': 'object',
        'events': 'object',
        'sub_organization': 'object',
        'has_offer_catalog': 'object',
        'global_location_number': 'str',
        'reviews': 'object',
        'members': 'object',
        'aggregate_rating': 'object',
        'duns': 'str',
        'tax_id': 'str',
        'award': 'str',
        'makes_offer': 'object',
        'contact_points': 'object',
        'awards': 'str',
        'seeks': 'object',
        'member': 'object',
        'founders': 'object',
        'alumni': 'object',
        'dissolution_date': 'datetime',
        'address': 'object',
        'logo': 'str',
        'employees': 'object',
        'telephone': 'str',
        'email': 'str',
        'department': 'object',
        'contact_point': 'object',
        'parent_organization': 'object',
        'legal_name': 'str',
        'founding_date': 'datetime',
        'employee': 'object',
        'number_of_employees': 'object',
        'naics': 'str',
        'has_pos': 'object',
        'review': 'object',
        'founding_location': 'object',
        'owns': 'object',
        'event': 'object',
        'founder': 'object',
        'publishing_principles': 'object',
        'sponsor': 'object',
        'isic_v4': 'str',
        'location': 'object',
        'brand': 'object',
        'vat_id': 'str',
        'lei_code': 'str',
        'fax_number': 'str',
        'same_as': 'str',
        'url': 'str',
        'image': 'object',
        'additional_type': 'str',
        'name': 'str',
        'identifier': 'str',
        'potential_action': 'object',
        'main_entity_of_page': 'str',
        'description': 'str',
        'disambiguating_description': 'str',
        'alternate_name': 'str'
    }

    attribute_map = {
        'service_area': 'serviceArea',
        'funder': 'funder',
        'area_served': 'areaServed',
        'member_of': 'memberOf',
        'events': 'events',
        'sub_organization': 'subOrganization',
        'has_offer_catalog': 'hasOfferCatalog',
        'global_location_number': 'globalLocationNumber',
        'reviews': 'reviews',
        'members': 'members',
        'aggregate_rating': 'aggregateRating',
        'duns': 'duns',
        'tax_id': 'taxID',
        'award': 'award',
        'makes_offer': 'makesOffer',
        'contact_points': 'contactPoints',
        'awards': 'awards',
        'seeks': 'seeks',
        'member': 'member',
        'founders': 'founders',
        'alumni': 'alumni',
        'dissolution_date': 'dissolutionDate',
        'address': 'address',
        'logo': 'logo',
        'employees': 'employees',
        'telephone': 'telephone',
        'email': 'email',
        'department': 'department',
        'contact_point': 'contactPoint',
        'parent_organization': 'parentOrganization',
        'legal_name': 'legalName',
        'founding_date': 'foundingDate',
        'employee': 'employee',
        'number_of_employees': 'numberOfEmployees',
        'naics': 'naics',
        'has_pos': 'hasPOS',
        'review': 'review',
        'founding_location': 'foundingLocation',
        'owns': 'owns',
        'event': 'event',
        'founder': 'founder',
        'publishing_principles': 'publishingPrinciples',
        'sponsor': 'sponsor',
        'isic_v4': 'isicV4',
        'location': 'location',
        'brand': 'brand',
        'vat_id': 'vatID',
        'lei_code': 'leiCode',
        'fax_number': 'faxNumber',
        'same_as': 'sameAs',
        'url': 'url',
        'image': 'image',
        'additional_type': 'additionalType',
        'name': 'name',
        'identifier': 'identifier',
        'potential_action': 'potentialAction',
        'main_entity_of_page': 'mainEntityOfPage',
        'description': 'description',
        'disambiguating_description': 'disambiguatingDescription',
        'alternate_name': 'alternateName'
    }

    def __init__(self, service_area=None, funder=None, area_served=None, member_of=None, events=None, sub_organization=None, has_offer_catalog=None, global_location_number=None, reviews=None, members=None, aggregate_rating=None, duns=None, tax_id=None, award=None, makes_offer=None, contact_points=None, awards=None, seeks=None, member=None, founders=None, alumni=None, dissolution_date=None, address=None, logo=None, employees=None, telephone=None, email=None, department=None, contact_point=None, parent_organization=None, legal_name=None, founding_date=None, employee=None, number_of_employees=None, naics=None, has_pos=None, review=None, founding_location=None, owns=None, event=None, founder=None, publishing_principles=None, sponsor=None, isic_v4=None, location=None, brand=None, vat_id=None, lei_code=None, fax_number=None, same_as=None, url=None, image=None, additional_type=None, name=None, identifier=None, potential_action=None, main_entity_of_page=None, description=None, disambiguating_description=None, alternate_name=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._service_area = None
        self._funder = None
        self._area_served = None
        self._member_of = None
        self._events = None
        self._sub_organization = None
        self._has_offer_catalog = None
        self._global_location_number = None
        self._reviews = None
        self._members = None
        self._aggregate_rating = None
        self._duns = None
        self._tax_id = None
        self._award = None
        self._makes_offer = None
        self._contact_points = None
        self._awards = None
        self._seeks = None
        self._member = None
        self._founders = None
        self._alumni = None
        self._dissolution_date = None
        self._address = None
        self._logo = None
        self._employees = None
        self._telephone = None
        self._email = None
        self._department = None
        self._contact_point = None
        self._parent_organization = None
        self._legal_name = None
        self._founding_date = None
        self._employee = None
        self._number_of_employees = None
        self._naics = None
        self._has_pos = None
        self._review = None
        self._founding_location = None
        self._owns = None
        self._event = None
        self._founder = None
        self._publishing_principles = None
        self._sponsor = None
        self._isic_v4 = None
        self._location = None
        self._brand = None
        self._vat_id = None
        self._lei_code = None
        self._fax_number = None
        self._same_as = None
        self._url = None
        self._image = None
        self._additional_type = None
        self._name = None
        self._identifier = None
        self._potential_action = None
        self._main_entity_of_page = None
        self._description = None
        self._disambiguating_description = None
        self._alternate_name = None
        self.discriminator = None

        if service_area is not None:
            self.service_area = service_area
        if funder is not None:
            self.funder = funder
        if area_served is not None:
            self.area_served = area_served
        if member_of is not None:
            self.member_of = member_of
        if events is not None:
            self.events = events
        if sub_organization is not None:
            self.sub_organization = sub_organization
        if has_offer_catalog is not None:
            self.has_offer_catalog = has_offer_catalog
        if global_location_number is not None:
            self.global_location_number = global_location_number
        if reviews is not None:
            self.reviews = reviews
        if members is not None:
            self.members = members
        if aggregate_rating is not None:
            self.aggregate_rating = aggregate_rating
        if duns is not None:
            self.duns = duns
        if tax_id is not None:
            self.tax_id = tax_id
        if award is not None:
            self.award = award
        if makes_offer is not None:
            self.makes_offer = makes_offer
        if contact_points is not None:
            self.contact_points = contact_points
        if awards is not None:
            self.awards = awards
        if seeks is not None:
            self.seeks = seeks
        if member is not None:
            self.member = member
        if founders is not None:
            self.founders = founders
        if alumni is not None:
            self.alumni = alumni
        if dissolution_date is not None:
            self.dissolution_date = dissolution_date
        if address is not None:
            self.address = address
        if logo is not None:
            self.logo = logo
        if employees is not None:
            self.employees = employees
        if telephone is not None:
            self.telephone = telephone
        if email is not None:
            self.email = email
        if department is not None:
            self.department = department
        if contact_point is not None:
            self.contact_point = contact_point
        if parent_organization is not None:
            self.parent_organization = parent_organization
        if legal_name is not None:
            self.legal_name = legal_name
        if founding_date is not None:
            self.founding_date = founding_date
        if employee is not None:
            self.employee = employee
        if number_of_employees is not None:
            self.number_of_employees = number_of_employees
        if naics is not None:
            self.naics = naics
        if has_pos is not None:
            self.has_pos = has_pos
        if review is not None:
            self.review = review
        if founding_location is not None:
            self.founding_location = founding_location
        if owns is not None:
            self.owns = owns
        if event is not None:
            self.event = event
        if founder is not None:
            self.founder = founder
        if publishing_principles is not None:
            self.publishing_principles = publishing_principles
        if sponsor is not None:
            self.sponsor = sponsor
        if isic_v4 is not None:
            self.isic_v4 = isic_v4
        if location is not None:
            self.location = location
        if brand is not None:
            self.brand = brand
        if vat_id is not None:
            self.vat_id = vat_id
        if lei_code is not None:
            self.lei_code = lei_code
        if fax_number is not None:
            self.fax_number = fax_number
        if same_as is not None:
            self.same_as = same_as
        if url is not None:
            self.url = url
        if image is not None:
            self.image = image
        if additional_type is not None:
            self.additional_type = additional_type
        if name is not None:
            self.name = name
        if identifier is not None:
            self.identifier = identifier
        if potential_action is not None:
            self.potential_action = potential_action
        if main_entity_of_page is not None:
            self.main_entity_of_page = main_entity_of_page
        if description is not None:
            self.description = description
        if disambiguating_description is not None:
            self.disambiguating_description = disambiguating_description
        if alternate_name is not None:
            self.alternate_name = alternate_name

    @property
    def service_area(self):
        """Gets the service_area of this Organization.  # noqa: E501

        The geographic area where the service is provided.  # noqa: E501

        :return: The service_area of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._service_area

    @service_area.setter
    def service_area(self, service_area):
        """Sets the service_area of this Organization.

        The geographic area where the service is provided.  # noqa: E501

        :param service_area: The service_area of this Organization.  # noqa: E501
        :type: object
        """

        self._service_area = service_area

    @property
    def funder(self):
        """Gets the funder of this Organization.  # noqa: E501

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :return: The funder of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder):
        """Sets the funder of this Organization.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :param funder: The funder of this Organization.  # noqa: E501
        :type: object
        """

        self._funder = funder

    @property
    def area_served(self):
        """Gets the area_served of this Organization.  # noqa: E501

        The geographic area where a service or offered item is provided.  # noqa: E501

        :return: The area_served of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._area_served

    @area_served.setter
    def area_served(self, area_served):
        """Sets the area_served of this Organization.

        The geographic area where a service or offered item is provided.  # noqa: E501

        :param area_served: The area_served of this Organization.  # noqa: E501
        :type: object
        """

        self._area_served = area_served

    @property
    def member_of(self):
        """Gets the member_of of this Organization.  # noqa: E501

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :return: The member_of of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this Organization.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :param member_of: The member_of of this Organization.  # noqa: E501
        :type: object
        """

        self._member_of = member_of

    @property
    def events(self):
        """Gets the events of this Organization.  # noqa: E501

        Upcoming or past events associated with this place or organization.  # noqa: E501

        :return: The events of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Organization.

        Upcoming or past events associated with this place or organization.  # noqa: E501

        :param events: The events of this Organization.  # noqa: E501
        :type: object
        """

        self._events = events

    @property
    def sub_organization(self):
        """Gets the sub_organization of this Organization.  # noqa: E501

        A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific  department  property.  # noqa: E501

        :return: The sub_organization of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._sub_organization

    @sub_organization.setter
    def sub_organization(self, sub_organization):
        """Sets the sub_organization of this Organization.

        A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific  department  property.  # noqa: E501

        :param sub_organization: The sub_organization of this Organization.  # noqa: E501
        :type: object
        """

        self._sub_organization = sub_organization

    @property
    def has_offer_catalog(self):
        """Gets the has_offer_catalog of this Organization.  # noqa: E501

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :return: The has_offer_catalog of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._has_offer_catalog

    @has_offer_catalog.setter
    def has_offer_catalog(self, has_offer_catalog):
        """Sets the has_offer_catalog of this Organization.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :param has_offer_catalog: The has_offer_catalog of this Organization.  # noqa: E501
        :type: object
        """

        self._has_offer_catalog = has_offer_catalog

    @property
    def global_location_number(self):
        """Gets the global_location_number of this Organization.  # noqa: E501

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :return: The global_location_number of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._global_location_number

    @global_location_number.setter
    def global_location_number(self, global_location_number):
        """Sets the global_location_number of this Organization.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :param global_location_number: The global_location_number of this Organization.  # noqa: E501
        :type: str
        """

        self._global_location_number = global_location_number

    @property
    def reviews(self):
        """Gets the reviews of this Organization.  # noqa: E501

        Review of the item.  # noqa: E501

        :return: The reviews of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this Organization.

        Review of the item.  # noqa: E501

        :param reviews: The reviews of this Organization.  # noqa: E501
        :type: object
        """

        self._reviews = reviews

    @property
    def members(self):
        """Gets the members of this Organization.  # noqa: E501

        A member of this organization.  # noqa: E501

        :return: The members of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Organization.

        A member of this organization.  # noqa: E501

        :param members: The members of this Organization.  # noqa: E501
        :type: object
        """

        self._members = members

    @property
    def aggregate_rating(self):
        """Gets the aggregate_rating of this Organization.  # noqa: E501

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :return: The aggregate_rating of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._aggregate_rating

    @aggregate_rating.setter
    def aggregate_rating(self, aggregate_rating):
        """Sets the aggregate_rating of this Organization.

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :param aggregate_rating: The aggregate_rating of this Organization.  # noqa: E501
        :type: object
        """

        self._aggregate_rating = aggregate_rating

    @property
    def duns(self):
        """Gets the duns of this Organization.  # noqa: E501

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :return: The duns of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._duns

    @duns.setter
    def duns(self, duns):
        """Sets the duns of this Organization.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :param duns: The duns of this Organization.  # noqa: E501
        :type: str
        """

        self._duns = duns

    @property
    def tax_id(self):
        """Gets the tax_id of this Organization.  # noqa: E501

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :return: The tax_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Organization.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :param tax_id: The tax_id of this Organization.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def award(self):
        """Gets the award of this Organization.  # noqa: E501

        An award won by or for this item.  # noqa: E501

        :return: The award of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this Organization.

        An award won by or for this item.  # noqa: E501

        :param award: The award of this Organization.  # noqa: E501
        :type: str
        """

        self._award = award

    @property
    def makes_offer(self):
        """Gets the makes_offer of this Organization.  # noqa: E501

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :return: The makes_offer of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._makes_offer

    @makes_offer.setter
    def makes_offer(self, makes_offer):
        """Sets the makes_offer of this Organization.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :param makes_offer: The makes_offer of this Organization.  # noqa: E501
        :type: object
        """

        self._makes_offer = makes_offer

    @property
    def contact_points(self):
        """Gets the contact_points of this Organization.  # noqa: E501

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_points of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._contact_points

    @contact_points.setter
    def contact_points(self, contact_points):
        """Sets the contact_points of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :param contact_points: The contact_points of this Organization.  # noqa: E501
        :type: object
        """

        self._contact_points = contact_points

    @property
    def awards(self):
        """Gets the awards of this Organization.  # noqa: E501

        Awards won by or for this item.  # noqa: E501

        :return: The awards of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this Organization.

        Awards won by or for this item.  # noqa: E501

        :param awards: The awards of this Organization.  # noqa: E501
        :type: str
        """

        self._awards = awards

    @property
    def seeks(self):
        """Gets the seeks of this Organization.  # noqa: E501

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :return: The seeks of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._seeks

    @seeks.setter
    def seeks(self, seeks):
        """Sets the seeks of this Organization.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :param seeks: The seeks of this Organization.  # noqa: E501
        :type: object
        """

        self._seeks = seeks

    @property
    def member(self):
        """Gets the member of this Organization.  # noqa: E501

        A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.  # noqa: E501

        :return: The member of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Organization.

        A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.  # noqa: E501

        :param member: The member of this Organization.  # noqa: E501
        :type: object
        """

        self._member = member

    @property
    def founders(self):
        """Gets the founders of this Organization.  # noqa: E501

        A person who founded this organization.  # noqa: E501

        :return: The founders of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._founders

    @founders.setter
    def founders(self, founders):
        """Sets the founders of this Organization.

        A person who founded this organization.  # noqa: E501

        :param founders: The founders of this Organization.  # noqa: E501
        :type: object
        """

        self._founders = founders

    @property
    def alumni(self):
        """Gets the alumni of this Organization.  # noqa: E501

        Alumni of an organization.  # noqa: E501

        :return: The alumni of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._alumni

    @alumni.setter
    def alumni(self, alumni):
        """Sets the alumni of this Organization.

        Alumni of an organization.  # noqa: E501

        :param alumni: The alumni of this Organization.  # noqa: E501
        :type: object
        """

        self._alumni = alumni

    @property
    def dissolution_date(self):
        """Gets the dissolution_date of this Organization.  # noqa: E501

        The date that this organization was dissolved.  # noqa: E501

        :return: The dissolution_date of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._dissolution_date

    @dissolution_date.setter
    def dissolution_date(self, dissolution_date):
        """Sets the dissolution_date of this Organization.

        The date that this organization was dissolved.  # noqa: E501

        :param dissolution_date: The dissolution_date of this Organization.  # noqa: E501
        :type: datetime
        """

        self._dissolution_date = dissolution_date

    @property
    def address(self):
        """Gets the address of this Organization.  # noqa: E501

        Physical address of the item.  # noqa: E501

        :return: The address of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organization.

        Physical address of the item.  # noqa: E501

        :param address: The address of this Organization.  # noqa: E501
        :type: object
        """

        self._address = address

    @property
    def logo(self):
        """Gets the logo of this Organization.  # noqa: E501

        An associated logo.  # noqa: E501

        :return: The logo of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Organization.

        An associated logo.  # noqa: E501

        :param logo: The logo of this Organization.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def employees(self):
        """Gets the employees of this Organization.  # noqa: E501

        People working for this organization.  # noqa: E501

        :return: The employees of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this Organization.

        People working for this organization.  # noqa: E501

        :param employees: The employees of this Organization.  # noqa: E501
        :type: object
        """

        self._employees = employees

    @property
    def telephone(self):
        """Gets the telephone of this Organization.  # noqa: E501

        The telephone number.  # noqa: E501

        :return: The telephone of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Organization.

        The telephone number.  # noqa: E501

        :param telephone: The telephone of this Organization.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def email(self):
        """Gets the email of this Organization.  # noqa: E501

        Email address.  # noqa: E501

        :return: The email of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Organization.

        Email address.  # noqa: E501

        :param email: The email of this Organization.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def department(self):
        """Gets the department of this Organization.  # noqa: E501

        A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.  # noqa: E501

        :return: The department of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Organization.

        A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.  # noqa: E501

        :param department: The department of this Organization.  # noqa: E501
        :type: object
        """

        self._department = department

    @property
    def contact_point(self):
        """Gets the contact_point of this Organization.  # noqa: E501

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_point of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point):
        """Sets the contact_point of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :param contact_point: The contact_point of this Organization.  # noqa: E501
        :type: object
        """

        self._contact_point = contact_point

    @property
    def parent_organization(self):
        """Gets the parent_organization of this Organization.  # noqa: E501

        The larger organization that this organization is a subOrganization of, if any.  # noqa: E501

        :return: The parent_organization of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._parent_organization

    @parent_organization.setter
    def parent_organization(self, parent_organization):
        """Sets the parent_organization of this Organization.

        The larger organization that this organization is a subOrganization of, if any.  # noqa: E501

        :param parent_organization: The parent_organization of this Organization.  # noqa: E501
        :type: object
        """

        self._parent_organization = parent_organization

    @property
    def legal_name(self):
        """Gets the legal_name of this Organization.  # noqa: E501

        The official name of the organization, e.g. the registered company name.  # noqa: E501

        :return: The legal_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this Organization.

        The official name of the organization, e.g. the registered company name.  # noqa: E501

        :param legal_name: The legal_name of this Organization.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def founding_date(self):
        """Gets the founding_date of this Organization.  # noqa: E501

        The date that this organization was founded.  # noqa: E501

        :return: The founding_date of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._founding_date

    @founding_date.setter
    def founding_date(self, founding_date):
        """Sets the founding_date of this Organization.

        The date that this organization was founded.  # noqa: E501

        :param founding_date: The founding_date of this Organization.  # noqa: E501
        :type: datetime
        """

        self._founding_date = founding_date

    @property
    def employee(self):
        """Gets the employee of this Organization.  # noqa: E501

        Someone working for this organization.  # noqa: E501

        :return: The employee of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Organization.

        Someone working for this organization.  # noqa: E501

        :param employee: The employee of this Organization.  # noqa: E501
        :type: object
        """

        self._employee = employee

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this Organization.  # noqa: E501

        The number of employees in an organization e.g. business.  # noqa: E501

        :return: The number_of_employees of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this Organization.

        The number of employees in an organization e.g. business.  # noqa: E501

        :param number_of_employees: The number_of_employees of this Organization.  # noqa: E501
        :type: object
        """

        self._number_of_employees = number_of_employees

    @property
    def naics(self):
        """Gets the naics of this Organization.  # noqa: E501

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :return: The naics of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._naics

    @naics.setter
    def naics(self, naics):
        """Sets the naics of this Organization.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :param naics: The naics of this Organization.  # noqa: E501
        :type: str
        """

        self._naics = naics

    @property
    def has_pos(self):
        """Gets the has_pos of this Organization.  # noqa: E501

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :return: The has_pos of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._has_pos

    @has_pos.setter
    def has_pos(self, has_pos):
        """Sets the has_pos of this Organization.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :param has_pos: The has_pos of this Organization.  # noqa: E501
        :type: object
        """

        self._has_pos = has_pos

    @property
    def review(self):
        """Gets the review of this Organization.  # noqa: E501

        A review of the item.  # noqa: E501

        :return: The review of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Organization.

        A review of the item.  # noqa: E501

        :param review: The review of this Organization.  # noqa: E501
        :type: object
        """

        self._review = review

    @property
    def founding_location(self):
        """Gets the founding_location of this Organization.  # noqa: E501

        The place where the Organization was founded.  # noqa: E501

        :return: The founding_location of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._founding_location

    @founding_location.setter
    def founding_location(self, founding_location):
        """Sets the founding_location of this Organization.

        The place where the Organization was founded.  # noqa: E501

        :param founding_location: The founding_location of this Organization.  # noqa: E501
        :type: object
        """

        self._founding_location = founding_location

    @property
    def owns(self):
        """Gets the owns of this Organization.  # noqa: E501

        Products owned by the organization or person.  # noqa: E501

        :return: The owns of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._owns

    @owns.setter
    def owns(self, owns):
        """Sets the owns of this Organization.

        Products owned by the organization or person.  # noqa: E501

        :param owns: The owns of this Organization.  # noqa: E501
        :type: object
        """

        self._owns = owns

    @property
    def event(self):
        """Gets the event of this Organization.  # noqa: E501

        Upcoming or past event associated with this place, organization, or action.  # noqa: E501

        :return: The event of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Organization.

        Upcoming or past event associated with this place, organization, or action.  # noqa: E501

        :param event: The event of this Organization.  # noqa: E501
        :type: object
        """

        self._event = event

    @property
    def founder(self):
        """Gets the founder of this Organization.  # noqa: E501

        A person who founded this organization.  # noqa: E501

        :return: The founder of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._founder

    @founder.setter
    def founder(self, founder):
        """Sets the founder of this Organization.

        A person who founded this organization.  # noqa: E501

        :param founder: The founder of this Organization.  # noqa: E501
        :type: object
        """

        self._founder = founder

    @property
    def publishing_principles(self):
        """Gets the publishing_principles of this Organization.  # noqa: E501

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :return: The publishing_principles of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._publishing_principles

    @publishing_principles.setter
    def publishing_principles(self, publishing_principles):
        """Sets the publishing_principles of this Organization.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :param publishing_principles: The publishing_principles of this Organization.  # noqa: E501
        :type: object
        """

        self._publishing_principles = publishing_principles

    @property
    def sponsor(self):
        """Gets the sponsor of this Organization.  # noqa: E501

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :return: The sponsor of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this Organization.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :param sponsor: The sponsor of this Organization.  # noqa: E501
        :type: object
        """

        self._sponsor = sponsor

    @property
    def isic_v4(self):
        """Gets the isic_v4 of this Organization.  # noqa: E501

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :return: The isic_v4 of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._isic_v4

    @isic_v4.setter
    def isic_v4(self, isic_v4):
        """Sets the isic_v4 of this Organization.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :param isic_v4: The isic_v4 of this Organization.  # noqa: E501
        :type: str
        """

        self._isic_v4 = isic_v4

    @property
    def location(self):
        """Gets the location of this Organization.  # noqa: E501

        The location of for example where the event is happening, an organization is located, or where an action takes place.  # noqa: E501

        :return: The location of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Organization.

        The location of for example where the event is happening, an organization is located, or where an action takes place.  # noqa: E501

        :param location: The location of this Organization.  # noqa: E501
        :type: object
        """

        self._location = location

    @property
    def brand(self):
        """Gets the brand of this Organization.  # noqa: E501

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :return: The brand of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Organization.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :param brand: The brand of this Organization.  # noqa: E501
        :type: object
        """

        self._brand = brand

    @property
    def vat_id(self):
        """Gets the vat_id of this Organization.  # noqa: E501

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :return: The vat_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this Organization.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :param vat_id: The vat_id of this Organization.  # noqa: E501
        :type: str
        """

        self._vat_id = vat_id

    @property
    def lei_code(self):
        """Gets the lei_code of this Organization.  # noqa: E501

        An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.  # noqa: E501

        :return: The lei_code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._lei_code

    @lei_code.setter
    def lei_code(self, lei_code):
        """Sets the lei_code of this Organization.

        An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.  # noqa: E501

        :param lei_code: The lei_code of this Organization.  # noqa: E501
        :type: str
        """

        self._lei_code = lei_code

    @property
    def fax_number(self):
        """Gets the fax_number of this Organization.  # noqa: E501

        The fax number.  # noqa: E501

        :return: The fax_number of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this Organization.

        The fax number.  # noqa: E501

        :param fax_number: The fax_number of this Organization.  # noqa: E501
        :type: str
        """

        self._fax_number = fax_number

    @property
    def same_as(self):
        """Gets the same_as of this Organization.  # noqa: E501

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this Organization.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this Organization.  # noqa: E501
        :type: str
        """

        self._same_as = same_as

    @property
    def url(self):
        """Gets the url of this Organization.  # noqa: E501

        URL of the item.  # noqa: E501

        :return: The url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Organization.

        URL of the item.  # noqa: E501

        :param url: The url of this Organization.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """Gets the image of this Organization.  # noqa: E501

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Organization.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this Organization.  # noqa: E501
        :type: object
        """

        self._image = image

    @property
    def additional_type(self):
        """Gets the additional_type of this Organization.  # noqa: E501

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type):
        """Sets the additional_type of this Organization.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this Organization.  # noqa: E501
        :type: str
        """

        self._additional_type = additional_type

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The name of the item.  # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this Organization.  # noqa: E501

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The identifier of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Organization.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param identifier: The identifier of this Organization.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def potential_action(self):
        """Gets the potential_action of this Organization.  # noqa: E501

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this Organization.  # noqa: E501
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this Organization.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this Organization.  # noqa: E501
        :type: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self):
        """Gets the main_entity_of_page of this Organization.  # noqa: E501

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page):
        """Sets the main_entity_of_page of this Organization.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this Organization.  # noqa: E501
        :type: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501

        A description of the item.  # noqa: E501

        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.

        A description of the item.  # noqa: E501

        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disambiguating_description(self):
        """Gets the disambiguating_description of this Organization.  # noqa: E501

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description):
        """Sets the disambiguating_description of this Organization.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this Organization.  # noqa: E501
        :type: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self):
        """Gets the alternate_name of this Organization.  # noqa: E501

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this Organization.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this Organization.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
