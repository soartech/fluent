# coding: utf-8

"""
    Asset API

    This API is used to interact with the data stored in the TLA Activity Index database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AlignmentObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_description': 'str',
        'alignment_type': 'str',
        'target_url': 'str',
        'target_name': 'str',
        'educational_framework': 'str',
        'same_as': 'str',
        'url': 'str',
        'image': 'object',
        'additional_type': 'str',
        'name': 'str',
        'identifier': 'str',
        'potential_action': 'object',
        'main_entity_of_page': 'str',
        'description': 'str',
        'disambiguating_description': 'str',
        'alternate_name': 'str'
    }

    attribute_map = {
        'target_description': 'targetDescription',
        'alignment_type': 'alignmentType',
        'target_url': 'targetUrl',
        'target_name': 'targetName',
        'educational_framework': 'educationalFramework',
        'same_as': 'sameAs',
        'url': 'url',
        'image': 'image',
        'additional_type': 'additionalType',
        'name': 'name',
        'identifier': 'identifier',
        'potential_action': 'potentialAction',
        'main_entity_of_page': 'mainEntityOfPage',
        'description': 'description',
        'disambiguating_description': 'disambiguatingDescription',
        'alternate_name': 'alternateName'
    }

    def __init__(self, target_description=None, alignment_type=None, target_url=None, target_name=None, educational_framework=None, same_as=None, url=None, image=None, additional_type=None, name=None, identifier=None, potential_action=None, main_entity_of_page=None, description=None, disambiguating_description=None, alternate_name=None):  # noqa: E501
        """AlignmentObject - a model defined in Swagger"""  # noqa: E501

        self._target_description = None
        self._alignment_type = None
        self._target_url = None
        self._target_name = None
        self._educational_framework = None
        self._same_as = None
        self._url = None
        self._image = None
        self._additional_type = None
        self._name = None
        self._identifier = None
        self._potential_action = None
        self._main_entity_of_page = None
        self._description = None
        self._disambiguating_description = None
        self._alternate_name = None
        self.discriminator = None

        if target_description is not None:
            self.target_description = target_description
        if alignment_type is not None:
            self.alignment_type = alignment_type
        if target_url is not None:
            self.target_url = target_url
        if target_name is not None:
            self.target_name = target_name
        if educational_framework is not None:
            self.educational_framework = educational_framework
        if same_as is not None:
            self.same_as = same_as
        if url is not None:
            self.url = url
        if image is not None:
            self.image = image
        if additional_type is not None:
            self.additional_type = additional_type
        if name is not None:
            self.name = name
        if identifier is not None:
            self.identifier = identifier
        if potential_action is not None:
            self.potential_action = potential_action
        if main_entity_of_page is not None:
            self.main_entity_of_page = main_entity_of_page
        if description is not None:
            self.description = description
        if disambiguating_description is not None:
            self.disambiguating_description = disambiguating_description
        if alternate_name is not None:
            self.alternate_name = alternate_name

    @property
    def target_description(self):
        """Gets the target_description of this AlignmentObject.  # noqa: E501

        The description of a node in an established educational framework.  # noqa: E501

        :return: The target_description of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._target_description

    @target_description.setter
    def target_description(self, target_description):
        """Sets the target_description of this AlignmentObject.

        The description of a node in an established educational framework.  # noqa: E501

        :param target_description: The target_description of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._target_description = target_description

    @property
    def alignment_type(self):
        """Gets the alignment_type of this AlignmentObject.  # noqa: E501

        A category of alignment between the learning resource and the framework node. Recommended values include:  assesses ,  teaches ,  requires ,  textComplexity ,  readingLevel ,  educationalSubject , and  educationalLevel .  # noqa: E501

        :return: The alignment_type of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._alignment_type

    @alignment_type.setter
    def alignment_type(self, alignment_type):
        """Sets the alignment_type of this AlignmentObject.

        A category of alignment between the learning resource and the framework node. Recommended values include:  assesses ,  teaches ,  requires ,  textComplexity ,  readingLevel ,  educationalSubject , and  educationalLevel .  # noqa: E501

        :param alignment_type: The alignment_type of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._alignment_type = alignment_type

    @property
    def target_url(self):
        """Gets the target_url of this AlignmentObject.  # noqa: E501

        The URL of a node in an established educational framework.  # noqa: E501

        :return: The target_url of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this AlignmentObject.

        The URL of a node in an established educational framework.  # noqa: E501

        :param target_url: The target_url of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._target_url = target_url

    @property
    def target_name(self):
        """Gets the target_name of this AlignmentObject.  # noqa: E501

        The name of a node in an established educational framework.  # noqa: E501

        :return: The target_name of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this AlignmentObject.

        The name of a node in an established educational framework.  # noqa: E501

        :param target_name: The target_name of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def educational_framework(self):
        """Gets the educational_framework of this AlignmentObject.  # noqa: E501

        The framework to which the resource being described is aligned.  # noqa: E501

        :return: The educational_framework of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._educational_framework

    @educational_framework.setter
    def educational_framework(self, educational_framework):
        """Sets the educational_framework of this AlignmentObject.

        The framework to which the resource being described is aligned.  # noqa: E501

        :param educational_framework: The educational_framework of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._educational_framework = educational_framework

    @property
    def same_as(self):
        """Gets the same_as of this AlignmentObject.  # noqa: E501

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this AlignmentObject.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._same_as = same_as

    @property
    def url(self):
        """Gets the url of this AlignmentObject.  # noqa: E501

        URL of the item.  # noqa: E501

        :return: The url of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlignmentObject.

        URL of the item.  # noqa: E501

        :param url: The url of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """Gets the image of this AlignmentObject.  # noqa: E501

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this AlignmentObject.  # noqa: E501
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AlignmentObject.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this AlignmentObject.  # noqa: E501
        :type: object
        """

        self._image = image

    @property
    def additional_type(self):
        """Gets the additional_type of this AlignmentObject.  # noqa: E501

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type):
        """Sets the additional_type of this AlignmentObject.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._additional_type = additional_type

    @property
    def name(self):
        """Gets the name of this AlignmentObject.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlignmentObject.

        The name of the item.  # noqa: E501

        :param name: The name of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this AlignmentObject.  # noqa: E501

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The identifier of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AlignmentObject.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param identifier: The identifier of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def potential_action(self):
        """Gets the potential_action of this AlignmentObject.  # noqa: E501

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this AlignmentObject.  # noqa: E501
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this AlignmentObject.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this AlignmentObject.  # noqa: E501
        :type: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self):
        """Gets the main_entity_of_page of this AlignmentObject.  # noqa: E501

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page):
        """Sets the main_entity_of_page of this AlignmentObject.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self):
        """Gets the description of this AlignmentObject.  # noqa: E501

        A description of the item.  # noqa: E501

        :return: The description of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlignmentObject.

        A description of the item.  # noqa: E501

        :param description: The description of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disambiguating_description(self):
        """Gets the disambiguating_description of this AlignmentObject.  # noqa: E501

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description):
        """Sets the disambiguating_description of this AlignmentObject.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self):
        """Gets the alternate_name of this AlignmentObject.  # noqa: E501

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this AlignmentObject.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this AlignmentObject.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this AlignmentObject.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlignmentObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
