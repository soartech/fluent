# coding: utf-8

"""
    Asset API

    This API is used to interact with the data stored in the TLA Activity Index database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from activity_index_client.models.alignment_object import AlignmentObject  # noqa: F401,E501


class CreativeWork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about': 'object',
        'educational_alignment': 'list[AlignmentObject]',
        'associated_media': 'object',
        'funder': 'object',
        'position': 'int',
        'audio': 'object',
        'work_example': 'object',
        'provider': 'object',
        'encoding': 'object',
        'interactivity_type': 'str',
        'accessibility_summary': 'str',
        'character': 'object',
        'audience': 'object',
        'source_organization': 'object',
        'is_part_of': 'object',
        'video': 'object',
        'publisher': 'object',
        'publication': 'object',
        'text': 'str',
        'expires': 'datetime',
        'contributor': 'object',
        'reviews': 'object',
        'typical_age_range': 'str',
        'released_event': 'object',
        'educational_use': 'list[str]',
        'content_location': 'object',
        'schema_version': 'str',
        'accessibility_feature': 'str',
        'aggregate_rating': 'object',
        'alternative_headline': 'str',
        'location_created': 'object',
        'access_mode_sufficient': 'str',
        'temporal_coverage': 'datetime',
        'accountable_person': 'object',
        'spatial_coverage': 'object',
        'offers': 'object',
        'editor': 'object',
        'discussion_url': 'str',
        'award': 'str',
        'copyright_holder': 'object',
        'accessibility_hazard': 'str',
        'copyright_year': 'float',
        'awards': 'str',
        'recorded_at': 'object',
        'comment_count': 'int',
        'file_format': 'str',
        'in_language': 'object',
        'accessibility_api': 'str',
        'interaction_statistic': 'object',
        'content_rating': 'str',
        'learning_resource_type': 'str',
        'access_mode': 'str',
        'material': 'str',
        'is_family_friendly': 'bool',
        'example_of_work': 'object',
        'version': 'str',
        'date_modified': 'datetime',
        'main_entity': 'object',
        'genre': 'str',
        'keywords': 'str',
        'author': 'object',
        'is_based_on_url': 'object',
        'time_required': 'str',
        'translator': 'object',
        'thumbnail_url': 'str',
        'has_part': 'object',
        'comment': 'object',
        'review': 'object',
        'license': 'object',
        'accessibility_control': 'str',
        'encodings': 'object',
        'is_based_on': 'object',
        'creator': 'object',
        'publishing_principles': 'object',
        'sponsor': 'object',
        'producer': 'object',
        'mentions': 'object',
        'date_created': 'datetime',
        'date_published': 'datetime',
        'is_accessible_for_free': 'bool',
        'headline': 'str',
        'citation': 'object',
        'same_as': 'str',
        'url': 'str',
        'image': 'str',
        'additional_type': 'str',
        'name': 'str',
        'identifier': 'str',
        'potential_action': 'object',
        'main_entity_of_page': 'str',
        'description': 'str',
        'disambiguating_description': 'str',
        'alternate_name': 'str'
    }

    attribute_map = {
        'about': 'about',
        'educational_alignment': 'educationalAlignment',
        'associated_media': 'associatedMedia',
        'funder': 'funder',
        'position': 'position',
        'audio': 'audio',
        'work_example': 'workExample',
        'provider': 'provider',
        'encoding': 'encoding',
        'interactivity_type': 'interactivityType',
        'accessibility_summary': 'accessibilitySummary',
        'character': 'character',
        'audience': 'audience',
        'source_organization': 'sourceOrganization',
        'is_part_of': 'isPartOf',
        'video': 'video',
        'publisher': 'publisher',
        'publication': 'publication',
        'text': 'text',
        'expires': 'expires',
        'contributor': 'contributor',
        'reviews': 'reviews',
        'typical_age_range': 'typicalAgeRange',
        'released_event': 'releasedEvent',
        'educational_use': 'educationalUse',
        'content_location': 'contentLocation',
        'schema_version': 'schemaVersion',
        'accessibility_feature': 'accessibilityFeature',
        'aggregate_rating': 'aggregateRating',
        'alternative_headline': 'alternativeHeadline',
        'location_created': 'locationCreated',
        'access_mode_sufficient': 'accessModeSufficient',
        'temporal_coverage': 'temporalCoverage',
        'accountable_person': 'accountablePerson',
        'spatial_coverage': 'spatialCoverage',
        'offers': 'offers',
        'editor': 'editor',
        'discussion_url': 'discussionUrl',
        'award': 'award',
        'copyright_holder': 'copyrightHolder',
        'accessibility_hazard': 'accessibilityHazard',
        'copyright_year': 'copyrightYear',
        'awards': 'awards',
        'recorded_at': 'recordedAt',
        'comment_count': 'commentCount',
        'file_format': 'fileFormat',
        'in_language': 'inLanguage',
        'accessibility_api': 'accessibilityAPI',
        'interaction_statistic': 'interactionStatistic',
        'content_rating': 'contentRating',
        'learning_resource_type': 'learningResourceType',
        'access_mode': 'accessMode',
        'material': 'material',
        'is_family_friendly': 'isFamilyFriendly',
        'example_of_work': 'exampleOfWork',
        'version': 'version',
        'date_modified': 'dateModified',
        'main_entity': 'mainEntity',
        'genre': 'genre',
        'keywords': 'keywords',
        'author': 'author',
        'is_based_on_url': 'isBasedOnUrl',
        'time_required': 'timeRequired',
        'translator': 'translator',
        'thumbnail_url': 'thumbnailUrl',
        'has_part': 'hasPart',
        'comment': 'comment',
        'review': 'review',
        'license': 'license',
        'accessibility_control': 'accessibilityControl',
        'encodings': 'encodings',
        'is_based_on': 'isBasedOn',
        'creator': 'creator',
        'publishing_principles': 'publishingPrinciples',
        'sponsor': 'sponsor',
        'producer': 'producer',
        'mentions': 'mentions',
        'date_created': 'dateCreated',
        'date_published': 'datePublished',
        'is_accessible_for_free': 'isAccessibleForFree',
        'headline': 'headline',
        'citation': 'citation',
        'same_as': 'sameAs',
        'url': 'url',
        'image': 'image',
        'additional_type': 'additionalType',
        'name': 'name',
        'identifier': 'identifier',
        'potential_action': 'potentialAction',
        'main_entity_of_page': 'mainEntityOfPage',
        'description': 'description',
        'disambiguating_description': 'disambiguatingDescription',
        'alternate_name': 'alternateName'
    }

    def __init__(self, about=None, educational_alignment=None, associated_media=None, funder=None, position=None, audio=None, work_example=None, provider=None, encoding=None, interactivity_type=None, accessibility_summary=None, character=None, audience=None, source_organization=None, is_part_of=None, video=None, publisher=None, publication=None, text=None, expires=None, contributor=None, reviews=None, typical_age_range=None, released_event=None, educational_use=None, content_location=None, schema_version=None, accessibility_feature=None, aggregate_rating=None, alternative_headline=None, location_created=None, access_mode_sufficient=None, temporal_coverage=None, accountable_person=None, spatial_coverage=None, offers=None, editor=None, discussion_url=None, award=None, copyright_holder=None, accessibility_hazard=None, copyright_year=None, awards=None, recorded_at=None, comment_count=None, file_format=None, in_language=None, accessibility_api=None, interaction_statistic=None, content_rating=None, learning_resource_type=None, access_mode=None, material=None, is_family_friendly=None, example_of_work=None, version=None, date_modified=None, main_entity=None, genre=None, keywords=None, author=None, is_based_on_url=None, time_required=None, translator=None, thumbnail_url=None, has_part=None, comment=None, review=None, license=None, accessibility_control=None, encodings=None, is_based_on=None, creator=None, publishing_principles=None, sponsor=None, producer=None, mentions=None, date_created=None, date_published=None, is_accessible_for_free=None, headline=None, citation=None, same_as=None, url=None, image=None, additional_type=None, name=None, identifier=None, potential_action=None, main_entity_of_page=None, description=None, disambiguating_description=None, alternate_name=None):  # noqa: E501
        """CreativeWork - a model defined in Swagger"""  # noqa: E501

        self._about = None
        self._educational_alignment = None
        self._associated_media = None
        self._funder = None
        self._position = None
        self._audio = None
        self._work_example = None
        self._provider = None
        self._encoding = None
        self._interactivity_type = None
        self._accessibility_summary = None
        self._character = None
        self._audience = None
        self._source_organization = None
        self._is_part_of = None
        self._video = None
        self._publisher = None
        self._publication = None
        self._text = None
        self._expires = None
        self._contributor = None
        self._reviews = None
        self._typical_age_range = None
        self._released_event = None
        self._educational_use = None
        self._content_location = None
        self._schema_version = None
        self._accessibility_feature = None
        self._aggregate_rating = None
        self._alternative_headline = None
        self._location_created = None
        self._access_mode_sufficient = None
        self._temporal_coverage = None
        self._accountable_person = None
        self._spatial_coverage = None
        self._offers = None
        self._editor = None
        self._discussion_url = None
        self._award = None
        self._copyright_holder = None
        self._accessibility_hazard = None
        self._copyright_year = None
        self._awards = None
        self._recorded_at = None
        self._comment_count = None
        self._file_format = None
        self._in_language = None
        self._accessibility_api = None
        self._interaction_statistic = None
        self._content_rating = None
        self._learning_resource_type = None
        self._access_mode = None
        self._material = None
        self._is_family_friendly = None
        self._example_of_work = None
        self._version = None
        self._date_modified = None
        self._main_entity = None
        self._genre = None
        self._keywords = None
        self._author = None
        self._is_based_on_url = None
        self._time_required = None
        self._translator = None
        self._thumbnail_url = None
        self._has_part = None
        self._comment = None
        self._review = None
        self._license = None
        self._accessibility_control = None
        self._encodings = None
        self._is_based_on = None
        self._creator = None
        self._publishing_principles = None
        self._sponsor = None
        self._producer = None
        self._mentions = None
        self._date_created = None
        self._date_published = None
        self._is_accessible_for_free = None
        self._headline = None
        self._citation = None
        self._same_as = None
        self._url = None
        self._image = None
        self._additional_type = None
        self._name = None
        self._identifier = None
        self._potential_action = None
        self._main_entity_of_page = None
        self._description = None
        self._disambiguating_description = None
        self._alternate_name = None
        self.discriminator = None

        if about is not None:
            self.about = about
        if educational_alignment is not None:
            self.educational_alignment = educational_alignment
        if associated_media is not None:
            self.associated_media = associated_media
        if funder is not None:
            self.funder = funder
        if position is not None:
            self.position = position
        if audio is not None:
            self.audio = audio
        if work_example is not None:
            self.work_example = work_example
        if provider is not None:
            self.provider = provider
        if encoding is not None:
            self.encoding = encoding
        if interactivity_type is not None:
            self.interactivity_type = interactivity_type
        if accessibility_summary is not None:
            self.accessibility_summary = accessibility_summary
        if character is not None:
            self.character = character
        if audience is not None:
            self.audience = audience
        if source_organization is not None:
            self.source_organization = source_organization
        if is_part_of is not None:
            self.is_part_of = is_part_of
        if video is not None:
            self.video = video
        if publisher is not None:
            self.publisher = publisher
        if publication is not None:
            self.publication = publication
        if text is not None:
            self.text = text
        if expires is not None:
            self.expires = expires
        if contributor is not None:
            self.contributor = contributor
        if reviews is not None:
            self.reviews = reviews
        if typical_age_range is not None:
            self.typical_age_range = typical_age_range
        if released_event is not None:
            self.released_event = released_event
        if educational_use is not None:
            self.educational_use = educational_use
        if content_location is not None:
            self.content_location = content_location
        if schema_version is not None:
            self.schema_version = schema_version
        if accessibility_feature is not None:
            self.accessibility_feature = accessibility_feature
        if aggregate_rating is not None:
            self.aggregate_rating = aggregate_rating
        if alternative_headline is not None:
            self.alternative_headline = alternative_headline
        if location_created is not None:
            self.location_created = location_created
        if access_mode_sufficient is not None:
            self.access_mode_sufficient = access_mode_sufficient
        if temporal_coverage is not None:
            self.temporal_coverage = temporal_coverage
        if accountable_person is not None:
            self.accountable_person = accountable_person
        if spatial_coverage is not None:
            self.spatial_coverage = spatial_coverage
        if offers is not None:
            self.offers = offers
        if editor is not None:
            self.editor = editor
        if discussion_url is not None:
            self.discussion_url = discussion_url
        if award is not None:
            self.award = award
        if copyright_holder is not None:
            self.copyright_holder = copyright_holder
        if accessibility_hazard is not None:
            self.accessibility_hazard = accessibility_hazard
        if copyright_year is not None:
            self.copyright_year = copyright_year
        if awards is not None:
            self.awards = awards
        if recorded_at is not None:
            self.recorded_at = recorded_at
        if comment_count is not None:
            self.comment_count = comment_count
        if file_format is not None:
            self.file_format = file_format
        if in_language is not None:
            self.in_language = in_language
        if accessibility_api is not None:
            self.accessibility_api = accessibility_api
        if interaction_statistic is not None:
            self.interaction_statistic = interaction_statistic
        if content_rating is not None:
            self.content_rating = content_rating
        if learning_resource_type is not None:
            self.learning_resource_type = learning_resource_type
        if access_mode is not None:
            self.access_mode = access_mode
        if material is not None:
            self.material = material
        if is_family_friendly is not None:
            self.is_family_friendly = is_family_friendly
        if example_of_work is not None:
            self.example_of_work = example_of_work
        if version is not None:
            self.version = version
        if date_modified is not None:
            self.date_modified = date_modified
        if main_entity is not None:
            self.main_entity = main_entity
        if genre is not None:
            self.genre = genre
        if keywords is not None:
            self.keywords = keywords
        if author is not None:
            self.author = author
        if is_based_on_url is not None:
            self.is_based_on_url = is_based_on_url
        if time_required is not None:
            self.time_required = time_required
        if translator is not None:
            self.translator = translator
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if has_part is not None:
            self.has_part = has_part
        if comment is not None:
            self.comment = comment
        if review is not None:
            self.review = review
        if license is not None:
            self.license = license
        if accessibility_control is not None:
            self.accessibility_control = accessibility_control
        if encodings is not None:
            self.encodings = encodings
        if is_based_on is not None:
            self.is_based_on = is_based_on
        if creator is not None:
            self.creator = creator
        if publishing_principles is not None:
            self.publishing_principles = publishing_principles
        if sponsor is not None:
            self.sponsor = sponsor
        if producer is not None:
            self.producer = producer
        if mentions is not None:
            self.mentions = mentions
        if date_created is not None:
            self.date_created = date_created
        if date_published is not None:
            self.date_published = date_published
        if is_accessible_for_free is not None:
            self.is_accessible_for_free = is_accessible_for_free
        if headline is not None:
            self.headline = headline
        if citation is not None:
            self.citation = citation
        if same_as is not None:
            self.same_as = same_as
        if url is not None:
            self.url = url
        if image is not None:
            self.image = image
        if additional_type is not None:
            self.additional_type = additional_type
        if name is not None:
            self.name = name
        if identifier is not None:
            self.identifier = identifier
        if potential_action is not None:
            self.potential_action = potential_action
        if main_entity_of_page is not None:
            self.main_entity_of_page = main_entity_of_page
        if description is not None:
            self.description = description
        if disambiguating_description is not None:
            self.disambiguating_description = disambiguating_description
        if alternate_name is not None:
            self.alternate_name = alternate_name

    @property
    def about(self):
        """Gets the about of this CreativeWork.  # noqa: E501

        The subject matter of the content.  # noqa: E501

        :return: The about of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this CreativeWork.

        The subject matter of the content.  # noqa: E501

        :param about: The about of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._about = about

    @property
    def educational_alignment(self):
        """Gets the educational_alignment of this CreativeWork.  # noqa: E501

        An alignment to an established educational framework.  # noqa: E501

        :return: The educational_alignment of this CreativeWork.  # noqa: E501
        :rtype: list[AlignmentObject]
        """
        return self._educational_alignment

    @educational_alignment.setter
    def educational_alignment(self, educational_alignment):
        """Sets the educational_alignment of this CreativeWork.

        An alignment to an established educational framework.  # noqa: E501

        :param educational_alignment: The educational_alignment of this CreativeWork.  # noqa: E501
        :type: list[AlignmentObject]
        """

        self._educational_alignment = educational_alignment

    @property
    def associated_media(self):
        """Gets the associated_media of this CreativeWork.  # noqa: E501

        A media object that encodes this CreativeWork. This property is a synonym for encoding.  # noqa: E501

        :return: The associated_media of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._associated_media

    @associated_media.setter
    def associated_media(self, associated_media):
        """Sets the associated_media of this CreativeWork.

        A media object that encodes this CreativeWork. This property is a synonym for encoding.  # noqa: E501

        :param associated_media: The associated_media of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._associated_media = associated_media

    @property
    def funder(self):
        """Gets the funder of this CreativeWork.  # noqa: E501

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :return: The funder of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder):
        """Sets the funder of this CreativeWork.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :param funder: The funder of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._funder = funder

    @property
    def position(self):
        """Gets the position of this CreativeWork.  # noqa: E501

        The position of an item in a series or sequence of items.  # noqa: E501

        :return: The position of this CreativeWork.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CreativeWork.

        The position of an item in a series or sequence of items.  # noqa: E501

        :param position: The position of this CreativeWork.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def audio(self):
        """Gets the audio of this CreativeWork.  # noqa: E501

        An embedded audio object.  # noqa: E501

        :return: The audio of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this CreativeWork.

        An embedded audio object.  # noqa: E501

        :param audio: The audio of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._audio = audio

    @property
    def work_example(self):
        """Gets the work_example of this CreativeWork.  # noqa: E501

        Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.  # noqa: E501

        :return: The work_example of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._work_example

    @work_example.setter
    def work_example(self, work_example):
        """Sets the work_example of this CreativeWork.

        Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.  # noqa: E501

        :param work_example: The work_example of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._work_example = work_example

    @property
    def provider(self):
        """Gets the provider of this CreativeWork.  # noqa: E501

        The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.  # noqa: E501

        :return: The provider of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreativeWork.

        The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.  # noqa: E501

        :param provider: The provider of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._provider = provider

    @property
    def encoding(self):
        """Gets the encoding of this CreativeWork.  # noqa: E501

        A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.  # noqa: E501

        :return: The encoding of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this CreativeWork.

        A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.  # noqa: E501

        :param encoding: The encoding of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._encoding = encoding

    @property
    def interactivity_type(self):
        """Gets the interactivity_type of this CreativeWork.  # noqa: E501

        The predominant mode of learning supported by the learning resource. Acceptable values are  active ,  expositive , or  mixed .  # noqa: E501

        :return: The interactivity_type of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._interactivity_type

    @interactivity_type.setter
    def interactivity_type(self, interactivity_type):
        """Sets the interactivity_type of this CreativeWork.

        The predominant mode of learning supported by the learning resource. Acceptable values are  active ,  expositive , or  mixed .  # noqa: E501

        :param interactivity_type: The interactivity_type of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._interactivity_type = interactivity_type

    @property
    def accessibility_summary(self):
        """Gets the accessibility_summary of this CreativeWork.  # noqa: E501

        A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as  short descriptions are present but long descriptions will be needed for non-visual users  or  short descriptions are present and no long descriptions are needed.   # noqa: E501

        :return: The accessibility_summary of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_summary

    @accessibility_summary.setter
    def accessibility_summary(self, accessibility_summary):
        """Sets the accessibility_summary of this CreativeWork.

        A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as  short descriptions are present but long descriptions will be needed for non-visual users  or  short descriptions are present and no long descriptions are needed.   # noqa: E501

        :param accessibility_summary: The accessibility_summary of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._accessibility_summary = accessibility_summary

    @property
    def character(self):
        """Gets the character of this CreativeWork.  # noqa: E501

        Fictional person connected with a creative work.  # noqa: E501

        :return: The character of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._character

    @character.setter
    def character(self, character):
        """Sets the character of this CreativeWork.

        Fictional person connected with a creative work.  # noqa: E501

        :param character: The character of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._character = character

    @property
    def audience(self):
        """Gets the audience of this CreativeWork.  # noqa: E501

        An intended audience, i.e. a group for whom something was created.  # noqa: E501

        :return: The audience of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this CreativeWork.

        An intended audience, i.e. a group for whom something was created.  # noqa: E501

        :param audience: The audience of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._audience = audience

    @property
    def source_organization(self):
        """Gets the source_organization of this CreativeWork.  # noqa: E501

        The Organization on whose behalf the creator was working.  # noqa: E501

        :return: The source_organization of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._source_organization

    @source_organization.setter
    def source_organization(self, source_organization):
        """Sets the source_organization of this CreativeWork.

        The Organization on whose behalf the creator was working.  # noqa: E501

        :param source_organization: The source_organization of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._source_organization = source_organization

    @property
    def is_part_of(self):
        """Gets the is_part_of of this CreativeWork.  # noqa: E501

        Indicates a CreativeWork that this CreativeWork is (in some sense) part of.  # noqa: E501

        :return: The is_part_of of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._is_part_of

    @is_part_of.setter
    def is_part_of(self, is_part_of):
        """Sets the is_part_of of this CreativeWork.

        Indicates a CreativeWork that this CreativeWork is (in some sense) part of.  # noqa: E501

        :param is_part_of: The is_part_of of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._is_part_of = is_part_of

    @property
    def video(self):
        """Gets the video of this CreativeWork.  # noqa: E501

        An embedded video object.  # noqa: E501

        :return: The video of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this CreativeWork.

        An embedded video object.  # noqa: E501

        :param video: The video of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._video = video

    @property
    def publisher(self):
        """Gets the publisher of this CreativeWork.  # noqa: E501

        The publisher of the creative work.  # noqa: E501

        :return: The publisher of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this CreativeWork.

        The publisher of the creative work.  # noqa: E501

        :param publisher: The publisher of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._publisher = publisher

    @property
    def publication(self):
        """Gets the publication of this CreativeWork.  # noqa: E501

        A publication event associated with the item.  # noqa: E501

        :return: The publication of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this CreativeWork.

        A publication event associated with the item.  # noqa: E501

        :param publication: The publication of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._publication = publication

    @property
    def text(self):
        """Gets the text of this CreativeWork.  # noqa: E501

        The textual content of this CreativeWork.  # noqa: E501

        :return: The text of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreativeWork.

        The textual content of this CreativeWork.  # noqa: E501

        :param text: The text of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def expires(self):
        """Gets the expires of this CreativeWork.  # noqa: E501

        Date the content expires and is no longer useful or available. For example a VideoObject or NewsArticle whose availability or relevance is time-limited, or a ClaimReview fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.  # noqa: E501

        :return: The expires of this CreativeWork.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreativeWork.

        Date the content expires and is no longer useful or available. For example a VideoObject or NewsArticle whose availability or relevance is time-limited, or a ClaimReview fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.  # noqa: E501

        :param expires: The expires of this CreativeWork.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def contributor(self):
        """Gets the contributor of this CreativeWork.  # noqa: E501

        A secondary contributor to the CreativeWork or Event.  # noqa: E501

        :return: The contributor of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this CreativeWork.

        A secondary contributor to the CreativeWork or Event.  # noqa: E501

        :param contributor: The contributor of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._contributor = contributor

    @property
    def reviews(self):
        """Gets the reviews of this CreativeWork.  # noqa: E501

        Review of the item.  # noqa: E501

        :return: The reviews of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this CreativeWork.

        Review of the item.  # noqa: E501

        :param reviews: The reviews of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._reviews = reviews

    @property
    def typical_age_range(self):
        """Gets the typical_age_range of this CreativeWork.  # noqa: E501

        The typical expected age range, e.g.  7-9 ,  11- .  # noqa: E501

        :return: The typical_age_range of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._typical_age_range

    @typical_age_range.setter
    def typical_age_range(self, typical_age_range):
        """Sets the typical_age_range of this CreativeWork.

        The typical expected age range, e.g.  7-9 ,  11- .  # noqa: E501

        :param typical_age_range: The typical_age_range of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._typical_age_range = typical_age_range

    @property
    def released_event(self):
        """Gets the released_event of this CreativeWork.  # noqa: E501

        The place and time the release was issued, expressed as a PublicationEvent.  # noqa: E501

        :return: The released_event of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._released_event

    @released_event.setter
    def released_event(self, released_event):
        """Sets the released_event of this CreativeWork.

        The place and time the release was issued, expressed as a PublicationEvent.  # noqa: E501

        :param released_event: The released_event of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._released_event = released_event

    @property
    def educational_use(self):
        """Gets the educational_use of this CreativeWork.  # noqa: E501

        The purpose of a work in the context of education; for example,  assignment ,  group work .  # noqa: E501

        :return: The educational_use of this CreativeWork.  # noqa: E501
        :rtype: list[str]
        """
        return self._educational_use

    @educational_use.setter
    def educational_use(self, educational_use):
        """Sets the educational_use of this CreativeWork.

        The purpose of a work in the context of education; for example,  assignment ,  group work .  # noqa: E501

        :param educational_use: The educational_use of this CreativeWork.  # noqa: E501
        :type: list[str]
        """

        self._educational_use = educational_use

    @property
    def content_location(self):
        """Gets the content_location of this CreativeWork.  # noqa: E501

        The location depicted or described in the content. For example, the location in a photograph or painting.  # noqa: E501

        :return: The content_location of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._content_location

    @content_location.setter
    def content_location(self, content_location):
        """Sets the content_location of this CreativeWork.

        The location depicted or described in the content. For example, the location in a photograph or painting.  # noqa: E501

        :param content_location: The content_location of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._content_location = content_location

    @property
    def schema_version(self):
        """Gets the schema_version of this CreativeWork.  # noqa: E501

        Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application.  # noqa: E501

        :return: The schema_version of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this CreativeWork.

        Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application.  # noqa: E501

        :param schema_version: The schema_version of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def accessibility_feature(self):
        """Gets the accessibility_feature of this CreativeWork.  # noqa: E501

        Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility (WebSchemas wiki lists possible values).  # noqa: E501

        :return: The accessibility_feature of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_feature

    @accessibility_feature.setter
    def accessibility_feature(self, accessibility_feature):
        """Sets the accessibility_feature of this CreativeWork.

        Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility (WebSchemas wiki lists possible values).  # noqa: E501

        :param accessibility_feature: The accessibility_feature of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._accessibility_feature = accessibility_feature

    @property
    def aggregate_rating(self):
        """Gets the aggregate_rating of this CreativeWork.  # noqa: E501

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :return: The aggregate_rating of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._aggregate_rating

    @aggregate_rating.setter
    def aggregate_rating(self, aggregate_rating):
        """Sets the aggregate_rating of this CreativeWork.

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :param aggregate_rating: The aggregate_rating of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._aggregate_rating = aggregate_rating

    @property
    def alternative_headline(self):
        """Gets the alternative_headline of this CreativeWork.  # noqa: E501

        A secondary title of the CreativeWork.  # noqa: E501

        :return: The alternative_headline of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._alternative_headline

    @alternative_headline.setter
    def alternative_headline(self, alternative_headline):
        """Sets the alternative_headline of this CreativeWork.

        A secondary title of the CreativeWork.  # noqa: E501

        :param alternative_headline: The alternative_headline of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._alternative_headline = alternative_headline

    @property
    def location_created(self):
        """Gets the location_created of this CreativeWork.  # noqa: E501

        The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.  # noqa: E501

        :return: The location_created of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._location_created

    @location_created.setter
    def location_created(self, location_created):
        """Sets the location_created of this CreativeWork.

        The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.  # noqa: E501

        :param location_created: The location_created of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._location_created = location_created

    @property
    def access_mode_sufficient(self):
        """Gets the access_mode_sufficient of this CreativeWork.  # noqa: E501

        A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual.  # noqa: E501

        :return: The access_mode_sufficient of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._access_mode_sufficient

    @access_mode_sufficient.setter
    def access_mode_sufficient(self, access_mode_sufficient):
        """Sets the access_mode_sufficient of this CreativeWork.

        A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Expected values include:  auditory, tactile, textual, visual.  # noqa: E501

        :param access_mode_sufficient: The access_mode_sufficient of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._access_mode_sufficient = access_mode_sufficient

    @property
    def temporal_coverage(self):
        """Gets the temporal_coverage of this CreativeWork.  # noqa: E501

        The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in ISO 8601 time interval format. In       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written  2011/2012 ). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via  1939/1945 .  # noqa: E501

        :return: The temporal_coverage of this CreativeWork.  # noqa: E501
        :rtype: datetime
        """
        return self._temporal_coverage

    @temporal_coverage.setter
    def temporal_coverage(self, temporal_coverage):
        """Sets the temporal_coverage of this CreativeWork.

        The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in ISO 8601 time interval format. In       the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written  2011/2012 ). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.       Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via  1939/1945 .  # noqa: E501

        :param temporal_coverage: The temporal_coverage of this CreativeWork.  # noqa: E501
        :type: datetime
        """

        self._temporal_coverage = temporal_coverage

    @property
    def accountable_person(self):
        """Gets the accountable_person of this CreativeWork.  # noqa: E501

        Specifies the Person that is legally accountable for the CreativeWork.  # noqa: E501

        :return: The accountable_person of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._accountable_person

    @accountable_person.setter
    def accountable_person(self, accountable_person):
        """Sets the accountable_person of this CreativeWork.

        Specifies the Person that is legally accountable for the CreativeWork.  # noqa: E501

        :param accountable_person: The accountable_person of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._accountable_person = accountable_person

    @property
    def spatial_coverage(self):
        """Gets the spatial_coverage of this CreativeWork.  # noqa: E501

        The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.  # noqa: E501

        :return: The spatial_coverage of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._spatial_coverage

    @spatial_coverage.setter
    def spatial_coverage(self, spatial_coverage):
        """Sets the spatial_coverage of this CreativeWork.

        The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of       contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates       areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.  # noqa: E501

        :param spatial_coverage: The spatial_coverage of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._spatial_coverage = spatial_coverage

    @property
    def offers(self):
        """Gets the offers of this CreativeWork.  # noqa: E501

        An offer to provide this item—for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event.  # noqa: E501

        :return: The offers of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this CreativeWork.

        An offer to provide this item—for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event.  # noqa: E501

        :param offers: The offers of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._offers = offers

    @property
    def editor(self):
        """Gets the editor of this CreativeWork.  # noqa: E501

        Specifies the Person who edited the CreativeWork.  # noqa: E501

        :return: The editor of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this CreativeWork.

        Specifies the Person who edited the CreativeWork.  # noqa: E501

        :param editor: The editor of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._editor = editor

    @property
    def discussion_url(self):
        """Gets the discussion_url of this CreativeWork.  # noqa: E501

        A link to the page containing the comments of the CreativeWork.  # noqa: E501

        :return: The discussion_url of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._discussion_url

    @discussion_url.setter
    def discussion_url(self, discussion_url):
        """Sets the discussion_url of this CreativeWork.

        A link to the page containing the comments of the CreativeWork.  # noqa: E501

        :param discussion_url: The discussion_url of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._discussion_url = discussion_url

    @property
    def award(self):
        """Gets the award of this CreativeWork.  # noqa: E501

        An award won by or for this item.  # noqa: E501

        :return: The award of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this CreativeWork.

        An award won by or for this item.  # noqa: E501

        :param award: The award of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._award = award

    @property
    def copyright_holder(self):
        """Gets the copyright_holder of this CreativeWork.  # noqa: E501

        The party holding the legal copyright to the CreativeWork.  # noqa: E501

        :return: The copyright_holder of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._copyright_holder

    @copyright_holder.setter
    def copyright_holder(self, copyright_holder):
        """Sets the copyright_holder of this CreativeWork.

        The party holding the legal copyright to the CreativeWork.  # noqa: E501

        :param copyright_holder: The copyright_holder of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._copyright_holder = copyright_holder

    @property
    def accessibility_hazard(self):
        """Gets the accessibility_hazard of this CreativeWork.  # noqa: E501

        A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 (WebSchemas wiki lists possible values).  # noqa: E501

        :return: The accessibility_hazard of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_hazard

    @accessibility_hazard.setter
    def accessibility_hazard(self, accessibility_hazard):
        """Sets the accessibility_hazard of this CreativeWork.

        A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3 (WebSchemas wiki lists possible values).  # noqa: E501

        :param accessibility_hazard: The accessibility_hazard of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._accessibility_hazard = accessibility_hazard

    @property
    def copyright_year(self):
        """Gets the copyright_year of this CreativeWork.  # noqa: E501

        The year during which the claimed copyright for the CreativeWork was first asserted.  # noqa: E501

        :return: The copyright_year of this CreativeWork.  # noqa: E501
        :rtype: float
        """
        return self._copyright_year

    @copyright_year.setter
    def copyright_year(self, copyright_year):
        """Sets the copyright_year of this CreativeWork.

        The year during which the claimed copyright for the CreativeWork was first asserted.  # noqa: E501

        :param copyright_year: The copyright_year of this CreativeWork.  # noqa: E501
        :type: float
        """

        self._copyright_year = copyright_year

    @property
    def awards(self):
        """Gets the awards of this CreativeWork.  # noqa: E501

        Awards won by or for this item.  # noqa: E501

        :return: The awards of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """Sets the awards of this CreativeWork.

        Awards won by or for this item.  # noqa: E501

        :param awards: The awards of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._awards = awards

    @property
    def recorded_at(self):
        """Gets the recorded_at of this CreativeWork.  # noqa: E501

        The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.  # noqa: E501

        :return: The recorded_at of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._recorded_at

    @recorded_at.setter
    def recorded_at(self, recorded_at):
        """Sets the recorded_at of this CreativeWork.

        The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.  # noqa: E501

        :param recorded_at: The recorded_at of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._recorded_at = recorded_at

    @property
    def comment_count(self):
        """Gets the comment_count of this CreativeWork.  # noqa: E501

        The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.  # noqa: E501

        :return: The comment_count of this CreativeWork.  # noqa: E501
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this CreativeWork.

        The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.  # noqa: E501

        :param comment_count: The comment_count of this CreativeWork.  # noqa: E501
        :type: int
        """

        self._comment_count = comment_count

    @property
    def file_format(self):
        """Gets the file_format of this CreativeWork.  # noqa: E501

        Media type, typically MIME format (see IANA site) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations,  encoding  can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.  # noqa: E501

        :return: The file_format of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this CreativeWork.

        Media type, typically MIME format (see IANA site) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations,  encoding  can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.  # noqa: E501

        :param file_format: The file_format of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def in_language(self):
        """Gets the in_language of this CreativeWork.  # noqa: E501

        The language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also availableLanguage.  # noqa: E501

        :return: The in_language of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._in_language

    @in_language.setter
    def in_language(self, in_language):
        """Sets the in_language of this CreativeWork.

        The language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also availableLanguage.  # noqa: E501

        :param in_language: The in_language of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._in_language = in_language

    @property
    def accessibility_api(self):
        """Gets the accessibility_api of this CreativeWork.  # noqa: E501

        Indicates that the resource is compatible with the referenced accessibility API (WebSchemas wiki lists possible values).  # noqa: E501

        :return: The accessibility_api of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_api

    @accessibility_api.setter
    def accessibility_api(self, accessibility_api):
        """Sets the accessibility_api of this CreativeWork.

        Indicates that the resource is compatible with the referenced accessibility API (WebSchemas wiki lists possible values).  # noqa: E501

        :param accessibility_api: The accessibility_api of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._accessibility_api = accessibility_api

    @property
    def interaction_statistic(self):
        """Gets the interaction_statistic of this CreativeWork.  # noqa: E501

        The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.  # noqa: E501

        :return: The interaction_statistic of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._interaction_statistic

    @interaction_statistic.setter
    def interaction_statistic(self, interaction_statistic):
        """Sets the interaction_statistic of this CreativeWork.

        The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.  # noqa: E501

        :param interaction_statistic: The interaction_statistic of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._interaction_statistic = interaction_statistic

    @property
    def content_rating(self):
        """Gets the content_rating of this CreativeWork.  # noqa: E501

        Official rating of a piece of content—for example, MPAA PG-13 .  # noqa: E501

        :return: The content_rating of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this CreativeWork.

        Official rating of a piece of content—for example, MPAA PG-13 .  # noqa: E501

        :param content_rating: The content_rating of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._content_rating = content_rating

    @property
    def learning_resource_type(self):
        """Gets the learning_resource_type of this CreativeWork.  # noqa: E501

        The predominant type or kind characterizing the learning resource. For example,  presentation ,  handout .  # noqa: E501

        :return: The learning_resource_type of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._learning_resource_type

    @learning_resource_type.setter
    def learning_resource_type(self, learning_resource_type):
        """Sets the learning_resource_type of this CreativeWork.

        The predominant type or kind characterizing the learning resource. For example,  presentation ,  handout .  # noqa: E501

        :param learning_resource_type: The learning_resource_type of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._learning_resource_type = learning_resource_type

    @property
    def access_mode(self):
        """Gets the access_mode of this CreativeWork.  # noqa: E501

        The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual.  # noqa: E501

        :return: The access_mode of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this CreativeWork.

        The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Expected values include: auditory, tactile, textual, visual, colorDependent, chartOnVisual, chemOnVisual, diagramOnVisual, mathOnVisual, musicOnVisual, textOnVisual.  # noqa: E501

        :param access_mode: The access_mode of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._access_mode = access_mode

    @property
    def material(self):
        """Gets the material of this CreativeWork.  # noqa: E501

        A material that something is made from, e.g. leather, wool, cotton, paper.  # noqa: E501

        :return: The material of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this CreativeWork.

        A material that something is made from, e.g. leather, wool, cotton, paper.  # noqa: E501

        :param material: The material of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def is_family_friendly(self):
        """Gets the is_family_friendly of this CreativeWork.  # noqa: E501

        Indicates whether this content is family friendly.  # noqa: E501

        :return: The is_family_friendly of this CreativeWork.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_friendly

    @is_family_friendly.setter
    def is_family_friendly(self, is_family_friendly):
        """Sets the is_family_friendly of this CreativeWork.

        Indicates whether this content is family friendly.  # noqa: E501

        :param is_family_friendly: The is_family_friendly of this CreativeWork.  # noqa: E501
        :type: bool
        """

        self._is_family_friendly = is_family_friendly

    @property
    def example_of_work(self):
        """Gets the example_of_work of this CreativeWork.  # noqa: E501

        A creative work that this work is an example/instance/realization/derivation of.  # noqa: E501

        :return: The example_of_work of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._example_of_work

    @example_of_work.setter
    def example_of_work(self, example_of_work):
        """Sets the example_of_work of this CreativeWork.

        A creative work that this work is an example/instance/realization/derivation of.  # noqa: E501

        :param example_of_work: The example_of_work of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._example_of_work = example_of_work

    @property
    def version(self):
        """Gets the version of this CreativeWork.  # noqa: E501

        The version of the CreativeWork embodied by a specified resource.  # noqa: E501

        :return: The version of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreativeWork.

        The version of the CreativeWork embodied by a specified resource.  # noqa: E501

        :param version: The version of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def date_modified(self):
        """Gets the date_modified of this CreativeWork.  # noqa: E501

        The date on which the CreativeWork was most recently modified or when the item s entry was modified within a DataFeed.  # noqa: E501

        :return: The date_modified of this CreativeWork.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this CreativeWork.

        The date on which the CreativeWork was most recently modified or when the item s entry was modified within a DataFeed.  # noqa: E501

        :param date_modified: The date_modified of this CreativeWork.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    @property
    def main_entity(self):
        """Gets the main_entity of this CreativeWork.  # noqa: E501

        Indicates the primary entity described in some page or other CreativeWork.  # noqa: E501

        :return: The main_entity of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._main_entity

    @main_entity.setter
    def main_entity(self, main_entity):
        """Sets the main_entity of this CreativeWork.

        Indicates the primary entity described in some page or other CreativeWork.  # noqa: E501

        :param main_entity: The main_entity of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._main_entity = main_entity

    @property
    def genre(self):
        """Gets the genre of this CreativeWork.  # noqa: E501

        Genre of the creative work, broadcast channel or group.  # noqa: E501

        :return: The genre of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this CreativeWork.

        Genre of the creative work, broadcast channel or group.  # noqa: E501

        :param genre: The genre of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._genre = genre

    @property
    def keywords(self):
        """Gets the keywords of this CreativeWork.  # noqa: E501

        Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.  # noqa: E501

        :return: The keywords of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CreativeWork.

        Keywords or tags used to describe this content. Multiple entries in a keywords list are typically delimited by commas.  # noqa: E501

        :param keywords: The keywords of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def author(self):
        """Gets the author of this CreativeWork.  # noqa: E501

        The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.  # noqa: E501

        :return: The author of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CreativeWork.

        The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.  # noqa: E501

        :param author: The author of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._author = author

    @property
    def is_based_on_url(self):
        """Gets the is_based_on_url of this CreativeWork.  # noqa: E501

        A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.  # noqa: E501

        :return: The is_based_on_url of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._is_based_on_url

    @is_based_on_url.setter
    def is_based_on_url(self, is_based_on_url):
        """Sets the is_based_on_url of this CreativeWork.

        A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.  # noqa: E501

        :param is_based_on_url: The is_based_on_url of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._is_based_on_url = is_based_on_url

    @property
    def time_required(self):
        """Gets the time_required of this CreativeWork.  # noqa: E501

        Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g.  P30M ,  P1H25M.  # noqa: E501

        :return: The time_required of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._time_required

    @time_required.setter
    def time_required(self, time_required):
        """Sets the time_required of this CreativeWork.

        Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g.  P30M ,  P1H25M.  # noqa: E501

        :param time_required: The time_required of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._time_required = time_required

    @property
    def translator(self):
        """Gets the translator of this CreativeWork.  # noqa: E501

        Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.  # noqa: E501

        :return: The translator of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this CreativeWork.

        Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.  # noqa: E501

        :param translator: The translator of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._translator = translator

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this CreativeWork.  # noqa: E501

        A thumbnail image relevant to the Thing.  # noqa: E501

        :return: The thumbnail_url of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this CreativeWork.

        A thumbnail image relevant to the Thing.  # noqa: E501

        :param thumbnail_url: The thumbnail_url of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def has_part(self):
        """Gets the has_part of this CreativeWork.  # noqa: E501

        Indicates a CreativeWork that is (in some sense) a part of this CreativeWork.  # noqa: E501

        :return: The has_part of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._has_part

    @has_part.setter
    def has_part(self, has_part):
        """Sets the has_part of this CreativeWork.

        Indicates a CreativeWork that is (in some sense) a part of this CreativeWork.  # noqa: E501

        :param has_part: The has_part of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._has_part = has_part

    @property
    def comment(self):
        """Gets the comment of this CreativeWork.  # noqa: E501

        Comments, typically from users.  # noqa: E501

        :return: The comment of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreativeWork.

        Comments, typically from users.  # noqa: E501

        :param comment: The comment of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._comment = comment

    @property
    def review(self):
        """Gets the review of this CreativeWork.  # noqa: E501

        A review of the item.  # noqa: E501

        :return: The review of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this CreativeWork.

        A review of the item.  # noqa: E501

        :param review: The review of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._review = review

    @property
    def license(self):
        """Gets the license of this CreativeWork.  # noqa: E501

        A license document that applies to this content, typically indicated by URL.  # noqa: E501

        :return: The license of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CreativeWork.

        A license document that applies to this content, typically indicated by URL.  # noqa: E501

        :param license: The license of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._license = license

    @property
    def accessibility_control(self):
        """Gets the accessibility_control of this CreativeWork.  # noqa: E501

        Identifies input methods that are sufficient to fully control the described resource (WebSchemas wiki lists possible values).  # noqa: E501

        :return: The accessibility_control of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_control

    @accessibility_control.setter
    def accessibility_control(self, accessibility_control):
        """Sets the accessibility_control of this CreativeWork.

        Identifies input methods that are sufficient to fully control the described resource (WebSchemas wiki lists possible values).  # noqa: E501

        :param accessibility_control: The accessibility_control of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._accessibility_control = accessibility_control

    @property
    def encodings(self):
        """Gets the encodings of this CreativeWork.  # noqa: E501

        A media object that encodes this CreativeWork.  # noqa: E501

        :return: The encodings of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._encodings

    @encodings.setter
    def encodings(self, encodings):
        """Sets the encodings of this CreativeWork.

        A media object that encodes this CreativeWork.  # noqa: E501

        :param encodings: The encodings of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._encodings = encodings

    @property
    def is_based_on(self):
        """Gets the is_based_on of this CreativeWork.  # noqa: E501

        A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.  # noqa: E501

        :return: The is_based_on of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._is_based_on

    @is_based_on.setter
    def is_based_on(self, is_based_on):
        """Sets the is_based_on of this CreativeWork.

        A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.  # noqa: E501

        :param is_based_on: The is_based_on of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._is_based_on = is_based_on

    @property
    def creator(self):
        """Gets the creator of this CreativeWork.  # noqa: E501

        The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.  # noqa: E501

        :return: The creator of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this CreativeWork.

        The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.  # noqa: E501

        :param creator: The creator of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._creator = creator

    @property
    def publishing_principles(self):
        """Gets the publishing_principles of this CreativeWork.  # noqa: E501

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :return: The publishing_principles of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._publishing_principles

    @publishing_principles.setter
    def publishing_principles(self, publishing_principles):
        """Sets the publishing_principles of this CreativeWork.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :param publishing_principles: The publishing_principles of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._publishing_principles = publishing_principles

    @property
    def sponsor(self):
        """Gets the sponsor of this CreativeWork.  # noqa: E501

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :return: The sponsor of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this CreativeWork.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :param sponsor: The sponsor of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._sponsor = sponsor

    @property
    def producer(self):
        """Gets the producer of this CreativeWork.  # noqa: E501

        The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).  # noqa: E501

        :return: The producer of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this CreativeWork.

        The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).  # noqa: E501

        :param producer: The producer of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._producer = producer

    @property
    def mentions(self):
        """Gets the mentions of this CreativeWork.  # noqa: E501

        Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.  # noqa: E501

        :return: The mentions of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this CreativeWork.

        Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.  # noqa: E501

        :param mentions: The mentions of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._mentions = mentions

    @property
    def date_created(self):
        """Gets the date_created of this CreativeWork.  # noqa: E501

        The date on which the CreativeWork was created or the item was added to a DataFeed.  # noqa: E501

        :return: The date_created of this CreativeWork.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CreativeWork.

        The date on which the CreativeWork was created or the item was added to a DataFeed.  # noqa: E501

        :param date_created: The date_created of this CreativeWork.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_published(self):
        """Gets the date_published of this CreativeWork.  # noqa: E501

        Date of first broadcast/publication.  # noqa: E501

        :return: The date_published of this CreativeWork.  # noqa: E501
        :rtype: datetime
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this CreativeWork.

        Date of first broadcast/publication.  # noqa: E501

        :param date_published: The date_published of this CreativeWork.  # noqa: E501
        :type: datetime
        """

        self._date_published = date_published

    @property
    def is_accessible_for_free(self):
        """Gets the is_accessible_for_free of this CreativeWork.  # noqa: E501

        A flag to signal that the item, event, or place is accessible for free.  # noqa: E501

        :return: The is_accessible_for_free of this CreativeWork.  # noqa: E501
        :rtype: bool
        """
        return self._is_accessible_for_free

    @is_accessible_for_free.setter
    def is_accessible_for_free(self, is_accessible_for_free):
        """Sets the is_accessible_for_free of this CreativeWork.

        A flag to signal that the item, event, or place is accessible for free.  # noqa: E501

        :param is_accessible_for_free: The is_accessible_for_free of this CreativeWork.  # noqa: E501
        :type: bool
        """

        self._is_accessible_for_free = is_accessible_for_free

    @property
    def headline(self):
        """Gets the headline of this CreativeWork.  # noqa: E501

        Headline of the article.  # noqa: E501

        :return: The headline of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this CreativeWork.

        Headline of the article.  # noqa: E501

        :param headline: The headline of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def citation(self):
        """Gets the citation of this CreativeWork.  # noqa: E501

        A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.  # noqa: E501

        :return: The citation of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this CreativeWork.

        A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.  # noqa: E501

        :param citation: The citation of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._citation = citation

    @property
    def same_as(self):
        """Gets the same_as of this CreativeWork.  # noqa: E501

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as):
        """Sets the same_as of this CreativeWork.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._same_as = same_as

    @property
    def url(self):
        """Gets the url of this CreativeWork.  # noqa: E501

        URL of the item.  # noqa: E501

        :return: The url of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreativeWork.

        URL of the item.  # noqa: E501

        :param url: The url of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def image(self):
        """Gets the image of this CreativeWork.  # noqa: E501

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CreativeWork.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def additional_type(self):
        """Gets the additional_type of this CreativeWork.  # noqa: E501

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type):
        """Sets the additional_type of this CreativeWork.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._additional_type = additional_type

    @property
    def name(self):
        """Gets the name of this CreativeWork.  # noqa: E501

        The name of the item.  # noqa: E501

        :return: The name of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreativeWork.

        The name of the item.  # noqa: E501

        :param name: The name of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this CreativeWork.  # noqa: E501

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The identifier of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CreativeWork.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param identifier: The identifier of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def potential_action(self):
        """Gets the potential_action of this CreativeWork.  # noqa: E501

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this CreativeWork.  # noqa: E501
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action):
        """Sets the potential_action of this CreativeWork.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this CreativeWork.  # noqa: E501
        :type: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self):
        """Gets the main_entity_of_page of this CreativeWork.  # noqa: E501

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page):
        """Sets the main_entity_of_page of this CreativeWork.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self):
        """Gets the description of this CreativeWork.  # noqa: E501

        A description of the item.  # noqa: E501

        :return: The description of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreativeWork.

        A description of the item.  # noqa: E501

        :param description: The description of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disambiguating_description(self):
        """Gets the disambiguating_description of this CreativeWork.  # noqa: E501

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description):
        """Sets the disambiguating_description of this CreativeWork.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self):
        """Gets the alternate_name of this CreativeWork.  # noqa: E501

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this CreativeWork.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this CreativeWork.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this CreativeWork.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreativeWork):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
