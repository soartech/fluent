# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from activity_index_server.models.base_model_ import Model
from activity_index_server import util


class Organization(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, service_area: object=None, funder: object=None, area_served: object=None, member_of: object=None, events: object=None, sub_organization: object=None, has_offer_catalog: object=None, global_location_number: str=None, reviews: object=None, members: object=None, aggregate_rating: object=None, duns: str=None, tax_id: str=None, award: str=None, makes_offer: object=None, contact_points: object=None, awards: str=None, seeks: object=None, member: object=None, founders: object=None, alumni: object=None, dissolution_date: datetime=None, address: object=None, logo: str=None, employees: object=None, telephone: str=None, email: str=None, department: object=None, contact_point: object=None, parent_organization: object=None, legal_name: str=None, founding_date: datetime=None, employee: object=None, number_of_employees: object=None, naics: str=None, has_pos: object=None, review: object=None, founding_location: object=None, owns: object=None, event: object=None, founder: object=None, publishing_principles: object=None, sponsor: object=None, isic_v4: str=None, location: object=None, brand: object=None, vat_id: str=None, lei_code: str=None, fax_number: str=None, same_as: str=None, url: str=None, image: object=None, additional_type: str=None, name: str=None, identifier: str=None, potential_action: object=None, main_entity_of_page: str=None, description: str=None, disambiguating_description: str=None, alternate_name: str=None):  # noqa: E501
        """Organization - a model defined in Swagger

        :param service_area: The service_area of this Organization.  # noqa: E501
        :type service_area: object
        :param funder: The funder of this Organization.  # noqa: E501
        :type funder: object
        :param area_served: The area_served of this Organization.  # noqa: E501
        :type area_served: object
        :param member_of: The member_of of this Organization.  # noqa: E501
        :type member_of: object
        :param events: The events of this Organization.  # noqa: E501
        :type events: object
        :param sub_organization: The sub_organization of this Organization.  # noqa: E501
        :type sub_organization: object
        :param has_offer_catalog: The has_offer_catalog of this Organization.  # noqa: E501
        :type has_offer_catalog: object
        :param global_location_number: The global_location_number of this Organization.  # noqa: E501
        :type global_location_number: str
        :param reviews: The reviews of this Organization.  # noqa: E501
        :type reviews: object
        :param members: The members of this Organization.  # noqa: E501
        :type members: object
        :param aggregate_rating: The aggregate_rating of this Organization.  # noqa: E501
        :type aggregate_rating: object
        :param duns: The duns of this Organization.  # noqa: E501
        :type duns: str
        :param tax_id: The tax_id of this Organization.  # noqa: E501
        :type tax_id: str
        :param award: The award of this Organization.  # noqa: E501
        :type award: str
        :param makes_offer: The makes_offer of this Organization.  # noqa: E501
        :type makes_offer: object
        :param contact_points: The contact_points of this Organization.  # noqa: E501
        :type contact_points: object
        :param awards: The awards of this Organization.  # noqa: E501
        :type awards: str
        :param seeks: The seeks of this Organization.  # noqa: E501
        :type seeks: object
        :param member: The member of this Organization.  # noqa: E501
        :type member: object
        :param founders: The founders of this Organization.  # noqa: E501
        :type founders: object
        :param alumni: The alumni of this Organization.  # noqa: E501
        :type alumni: object
        :param dissolution_date: The dissolution_date of this Organization.  # noqa: E501
        :type dissolution_date: datetime
        :param address: The address of this Organization.  # noqa: E501
        :type address: object
        :param logo: The logo of this Organization.  # noqa: E501
        :type logo: str
        :param employees: The employees of this Organization.  # noqa: E501
        :type employees: object
        :param telephone: The telephone of this Organization.  # noqa: E501
        :type telephone: str
        :param email: The email of this Organization.  # noqa: E501
        :type email: str
        :param department: The department of this Organization.  # noqa: E501
        :type department: object
        :param contact_point: The contact_point of this Organization.  # noqa: E501
        :type contact_point: object
        :param parent_organization: The parent_organization of this Organization.  # noqa: E501
        :type parent_organization: object
        :param legal_name: The legal_name of this Organization.  # noqa: E501
        :type legal_name: str
        :param founding_date: The founding_date of this Organization.  # noqa: E501
        :type founding_date: datetime
        :param employee: The employee of this Organization.  # noqa: E501
        :type employee: object
        :param number_of_employees: The number_of_employees of this Organization.  # noqa: E501
        :type number_of_employees: object
        :param naics: The naics of this Organization.  # noqa: E501
        :type naics: str
        :param has_pos: The has_pos of this Organization.  # noqa: E501
        :type has_pos: object
        :param review: The review of this Organization.  # noqa: E501
        :type review: object
        :param founding_location: The founding_location of this Organization.  # noqa: E501
        :type founding_location: object
        :param owns: The owns of this Organization.  # noqa: E501
        :type owns: object
        :param event: The event of this Organization.  # noqa: E501
        :type event: object
        :param founder: The founder of this Organization.  # noqa: E501
        :type founder: object
        :param publishing_principles: The publishing_principles of this Organization.  # noqa: E501
        :type publishing_principles: object
        :param sponsor: The sponsor of this Organization.  # noqa: E501
        :type sponsor: object
        :param isic_v4: The isic_v4 of this Organization.  # noqa: E501
        :type isic_v4: str
        :param location: The location of this Organization.  # noqa: E501
        :type location: object
        :param brand: The brand of this Organization.  # noqa: E501
        :type brand: object
        :param vat_id: The vat_id of this Organization.  # noqa: E501
        :type vat_id: str
        :param lei_code: The lei_code of this Organization.  # noqa: E501
        :type lei_code: str
        :param fax_number: The fax_number of this Organization.  # noqa: E501
        :type fax_number: str
        :param same_as: The same_as of this Organization.  # noqa: E501
        :type same_as: str
        :param url: The url of this Organization.  # noqa: E501
        :type url: str
        :param image: The image of this Organization.  # noqa: E501
        :type image: object
        :param additional_type: The additional_type of this Organization.  # noqa: E501
        :type additional_type: str
        :param name: The name of this Organization.  # noqa: E501
        :type name: str
        :param identifier: The identifier of this Organization.  # noqa: E501
        :type identifier: str
        :param potential_action: The potential_action of this Organization.  # noqa: E501
        :type potential_action: object
        :param main_entity_of_page: The main_entity_of_page of this Organization.  # noqa: E501
        :type main_entity_of_page: str
        :param description: The description of this Organization.  # noqa: E501
        :type description: str
        :param disambiguating_description: The disambiguating_description of this Organization.  # noqa: E501
        :type disambiguating_description: str
        :param alternate_name: The alternate_name of this Organization.  # noqa: E501
        :type alternate_name: str
        """
        self.swagger_types = {
            'service_area': object,
            'funder': object,
            'area_served': object,
            'member_of': object,
            'events': object,
            'sub_organization': object,
            'has_offer_catalog': object,
            'global_location_number': str,
            'reviews': object,
            'members': object,
            'aggregate_rating': object,
            'duns': str,
            'tax_id': str,
            'award': str,
            'makes_offer': object,
            'contact_points': object,
            'awards': str,
            'seeks': object,
            'member': object,
            'founders': object,
            'alumni': object,
            'dissolution_date': datetime,
            'address': object,
            'logo': str,
            'employees': object,
            'telephone': str,
            'email': str,
            'department': object,
            'contact_point': object,
            'parent_organization': object,
            'legal_name': str,
            'founding_date': datetime,
            'employee': object,
            'number_of_employees': object,
            'naics': str,
            'has_pos': object,
            'review': object,
            'founding_location': object,
            'owns': object,
            'event': object,
            'founder': object,
            'publishing_principles': object,
            'sponsor': object,
            'isic_v4': str,
            'location': object,
            'brand': object,
            'vat_id': str,
            'lei_code': str,
            'fax_number': str,
            'same_as': str,
            'url': str,
            'image': object,
            'additional_type': str,
            'name': str,
            'identifier': str,
            'potential_action': object,
            'main_entity_of_page': str,
            'description': str,
            'disambiguating_description': str,
            'alternate_name': str
        }

        self.attribute_map = {
            'service_area': 'serviceArea',
            'funder': 'funder',
            'area_served': 'areaServed',
            'member_of': 'memberOf',
            'events': 'events',
            'sub_organization': 'subOrganization',
            'has_offer_catalog': 'hasOfferCatalog',
            'global_location_number': 'globalLocationNumber',
            'reviews': 'reviews',
            'members': 'members',
            'aggregate_rating': 'aggregateRating',
            'duns': 'duns',
            'tax_id': 'taxID',
            'award': 'award',
            'makes_offer': 'makesOffer',
            'contact_points': 'contactPoints',
            'awards': 'awards',
            'seeks': 'seeks',
            'member': 'member',
            'founders': 'founders',
            'alumni': 'alumni',
            'dissolution_date': 'dissolutionDate',
            'address': 'address',
            'logo': 'logo',
            'employees': 'employees',
            'telephone': 'telephone',
            'email': 'email',
            'department': 'department',
            'contact_point': 'contactPoint',
            'parent_organization': 'parentOrganization',
            'legal_name': 'legalName',
            'founding_date': 'foundingDate',
            'employee': 'employee',
            'number_of_employees': 'numberOfEmployees',
            'naics': 'naics',
            'has_pos': 'hasPOS',
            'review': 'review',
            'founding_location': 'foundingLocation',
            'owns': 'owns',
            'event': 'event',
            'founder': 'founder',
            'publishing_principles': 'publishingPrinciples',
            'sponsor': 'sponsor',
            'isic_v4': 'isicV4',
            'location': 'location',
            'brand': 'brand',
            'vat_id': 'vatID',
            'lei_code': 'leiCode',
            'fax_number': 'faxNumber',
            'same_as': 'sameAs',
            'url': 'url',
            'image': 'image',
            'additional_type': 'additionalType',
            'name': 'name',
            'identifier': 'identifier',
            'potential_action': 'potentialAction',
            'main_entity_of_page': 'mainEntityOfPage',
            'description': 'description',
            'disambiguating_description': 'disambiguatingDescription',
            'alternate_name': 'alternateName'
        }

        self._service_area = service_area
        self._funder = funder
        self._area_served = area_served
        self._member_of = member_of
        self._events = events
        self._sub_organization = sub_organization
        self._has_offer_catalog = has_offer_catalog
        self._global_location_number = global_location_number
        self._reviews = reviews
        self._members = members
        self._aggregate_rating = aggregate_rating
        self._duns = duns
        self._tax_id = tax_id
        self._award = award
        self._makes_offer = makes_offer
        self._contact_points = contact_points
        self._awards = awards
        self._seeks = seeks
        self._member = member
        self._founders = founders
        self._alumni = alumni
        self._dissolution_date = dissolution_date
        self._address = address
        self._logo = logo
        self._employees = employees
        self._telephone = telephone
        self._email = email
        self._department = department
        self._contact_point = contact_point
        self._parent_organization = parent_organization
        self._legal_name = legal_name
        self._founding_date = founding_date
        self._employee = employee
        self._number_of_employees = number_of_employees
        self._naics = naics
        self._has_pos = has_pos
        self._review = review
        self._founding_location = founding_location
        self._owns = owns
        self._event = event
        self._founder = founder
        self._publishing_principles = publishing_principles
        self._sponsor = sponsor
        self._isic_v4 = isic_v4
        self._location = location
        self._brand = brand
        self._vat_id = vat_id
        self._lei_code = lei_code
        self._fax_number = fax_number
        self._same_as = same_as
        self._url = url
        self._image = image
        self._additional_type = additional_type
        self._name = name
        self._identifier = identifier
        self._potential_action = potential_action
        self._main_entity_of_page = main_entity_of_page
        self._description = description
        self._disambiguating_description = disambiguating_description
        self._alternate_name = alternate_name

    @classmethod
    def from_dict(cls, dikt) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Organization of this Organization.  # noqa: E501
        :rtype: Organization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_area(self) -> object:
        """Gets the service_area of this Organization.

        The geographic area where the service is provided.  # noqa: E501

        :return: The service_area of this Organization.
        :rtype: object
        """
        return self._service_area

    @service_area.setter
    def service_area(self, service_area: object):
        """Sets the service_area of this Organization.

        The geographic area where the service is provided.  # noqa: E501

        :param service_area: The service_area of this Organization.
        :type service_area: object
        """

        self._service_area = service_area

    @property
    def funder(self) -> object:
        """Gets the funder of this Organization.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :return: The funder of this Organization.
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder: object):
        """Sets the funder of this Organization.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :param funder: The funder of this Organization.
        :type funder: object
        """

        self._funder = funder

    @property
    def area_served(self) -> object:
        """Gets the area_served of this Organization.

        The geographic area where a service or offered item is provided.  # noqa: E501

        :return: The area_served of this Organization.
        :rtype: object
        """
        return self._area_served

    @area_served.setter
    def area_served(self, area_served: object):
        """Sets the area_served of this Organization.

        The geographic area where a service or offered item is provided.  # noqa: E501

        :param area_served: The area_served of this Organization.
        :type area_served: object
        """

        self._area_served = area_served

    @property
    def member_of(self) -> object:
        """Gets the member_of of this Organization.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :return: The member_of of this Organization.
        :rtype: object
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of: object):
        """Sets the member_of of this Organization.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :param member_of: The member_of of this Organization.
        :type member_of: object
        """

        self._member_of = member_of

    @property
    def events(self) -> object:
        """Gets the events of this Organization.

        Upcoming or past events associated with this place or organization.  # noqa: E501

        :return: The events of this Organization.
        :rtype: object
        """
        return self._events

    @events.setter
    def events(self, events: object):
        """Sets the events of this Organization.

        Upcoming or past events associated with this place or organization.  # noqa: E501

        :param events: The events of this Organization.
        :type events: object
        """

        self._events = events

    @property
    def sub_organization(self) -> object:
        """Gets the sub_organization of this Organization.

        A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific  department  property.  # noqa: E501

        :return: The sub_organization of this Organization.
        :rtype: object
        """
        return self._sub_organization

    @sub_organization.setter
    def sub_organization(self, sub_organization: object):
        """Sets the sub_organization of this Organization.

        A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific  department  property.  # noqa: E501

        :param sub_organization: The sub_organization of this Organization.
        :type sub_organization: object
        """

        self._sub_organization = sub_organization

    @property
    def has_offer_catalog(self) -> object:
        """Gets the has_offer_catalog of this Organization.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :return: The has_offer_catalog of this Organization.
        :rtype: object
        """
        return self._has_offer_catalog

    @has_offer_catalog.setter
    def has_offer_catalog(self, has_offer_catalog: object):
        """Sets the has_offer_catalog of this Organization.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :param has_offer_catalog: The has_offer_catalog of this Organization.
        :type has_offer_catalog: object
        """

        self._has_offer_catalog = has_offer_catalog

    @property
    def global_location_number(self) -> str:
        """Gets the global_location_number of this Organization.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :return: The global_location_number of this Organization.
        :rtype: str
        """
        return self._global_location_number

    @global_location_number.setter
    def global_location_number(self, global_location_number: str):
        """Sets the global_location_number of this Organization.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :param global_location_number: The global_location_number of this Organization.
        :type global_location_number: str
        """

        self._global_location_number = global_location_number

    @property
    def reviews(self) -> object:
        """Gets the reviews of this Organization.

        Review of the item.  # noqa: E501

        :return: The reviews of this Organization.
        :rtype: object
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews: object):
        """Sets the reviews of this Organization.

        Review of the item.  # noqa: E501

        :param reviews: The reviews of this Organization.
        :type reviews: object
        """

        self._reviews = reviews

    @property
    def members(self) -> object:
        """Gets the members of this Organization.

        A member of this organization.  # noqa: E501

        :return: The members of this Organization.
        :rtype: object
        """
        return self._members

    @members.setter
    def members(self, members: object):
        """Sets the members of this Organization.

        A member of this organization.  # noqa: E501

        :param members: The members of this Organization.
        :type members: object
        """

        self._members = members

    @property
    def aggregate_rating(self) -> object:
        """Gets the aggregate_rating of this Organization.

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :return: The aggregate_rating of this Organization.
        :rtype: object
        """
        return self._aggregate_rating

    @aggregate_rating.setter
    def aggregate_rating(self, aggregate_rating: object):
        """Sets the aggregate_rating of this Organization.

        The overall rating, based on a collection of reviews or ratings, of the item.  # noqa: E501

        :param aggregate_rating: The aggregate_rating of this Organization.
        :type aggregate_rating: object
        """

        self._aggregate_rating = aggregate_rating

    @property
    def duns(self) -> str:
        """Gets the duns of this Organization.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :return: The duns of this Organization.
        :rtype: str
        """
        return self._duns

    @duns.setter
    def duns(self, duns: str):
        """Sets the duns of this Organization.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :param duns: The duns of this Organization.
        :type duns: str
        """

        self._duns = duns

    @property
    def tax_id(self) -> str:
        """Gets the tax_id of this Organization.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :return: The tax_id of this Organization.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: str):
        """Sets the tax_id of this Organization.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :param tax_id: The tax_id of this Organization.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def award(self) -> str:
        """Gets the award of this Organization.

        An award won by or for this item.  # noqa: E501

        :return: The award of this Organization.
        :rtype: str
        """
        return self._award

    @award.setter
    def award(self, award: str):
        """Sets the award of this Organization.

        An award won by or for this item.  # noqa: E501

        :param award: The award of this Organization.
        :type award: str
        """

        self._award = award

    @property
    def makes_offer(self) -> object:
        """Gets the makes_offer of this Organization.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :return: The makes_offer of this Organization.
        :rtype: object
        """
        return self._makes_offer

    @makes_offer.setter
    def makes_offer(self, makes_offer: object):
        """Sets the makes_offer of this Organization.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :param makes_offer: The makes_offer of this Organization.
        :type makes_offer: object
        """

        self._makes_offer = makes_offer

    @property
    def contact_points(self) -> object:
        """Gets the contact_points of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_points of this Organization.
        :rtype: object
        """
        return self._contact_points

    @contact_points.setter
    def contact_points(self, contact_points: object):
        """Sets the contact_points of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :param contact_points: The contact_points of this Organization.
        :type contact_points: object
        """

        self._contact_points = contact_points

    @property
    def awards(self) -> str:
        """Gets the awards of this Organization.

        Awards won by or for this item.  # noqa: E501

        :return: The awards of this Organization.
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards: str):
        """Sets the awards of this Organization.

        Awards won by or for this item.  # noqa: E501

        :param awards: The awards of this Organization.
        :type awards: str
        """

        self._awards = awards

    @property
    def seeks(self) -> object:
        """Gets the seeks of this Organization.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :return: The seeks of this Organization.
        :rtype: object
        """
        return self._seeks

    @seeks.setter
    def seeks(self, seeks: object):
        """Sets the seeks of this Organization.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :param seeks: The seeks of this Organization.
        :type seeks: object
        """

        self._seeks = seeks

    @property
    def member(self) -> object:
        """Gets the member of this Organization.

        A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.  # noqa: E501

        :return: The member of this Organization.
        :rtype: object
        """
        return self._member

    @member.setter
    def member(self, member: object):
        """Sets the member of this Organization.

        A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.  # noqa: E501

        :param member: The member of this Organization.
        :type member: object
        """

        self._member = member

    @property
    def founders(self) -> object:
        """Gets the founders of this Organization.

        A person who founded this organization.  # noqa: E501

        :return: The founders of this Organization.
        :rtype: object
        """
        return self._founders

    @founders.setter
    def founders(self, founders: object):
        """Sets the founders of this Organization.

        A person who founded this organization.  # noqa: E501

        :param founders: The founders of this Organization.
        :type founders: object
        """

        self._founders = founders

    @property
    def alumni(self) -> object:
        """Gets the alumni of this Organization.

        Alumni of an organization.  # noqa: E501

        :return: The alumni of this Organization.
        :rtype: object
        """
        return self._alumni

    @alumni.setter
    def alumni(self, alumni: object):
        """Sets the alumni of this Organization.

        Alumni of an organization.  # noqa: E501

        :param alumni: The alumni of this Organization.
        :type alumni: object
        """

        self._alumni = alumni

    @property
    def dissolution_date(self) -> datetime:
        """Gets the dissolution_date of this Organization.

        The date that this organization was dissolved.  # noqa: E501

        :return: The dissolution_date of this Organization.
        :rtype: datetime
        """
        return self._dissolution_date

    @dissolution_date.setter
    def dissolution_date(self, dissolution_date: datetime):
        """Sets the dissolution_date of this Organization.

        The date that this organization was dissolved.  # noqa: E501

        :param dissolution_date: The dissolution_date of this Organization.
        :type dissolution_date: datetime
        """

        self._dissolution_date = dissolution_date

    @property
    def address(self) -> object:
        """Gets the address of this Organization.

        Physical address of the item.  # noqa: E501

        :return: The address of this Organization.
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address: object):
        """Sets the address of this Organization.

        Physical address of the item.  # noqa: E501

        :param address: The address of this Organization.
        :type address: object
        """

        self._address = address

    @property
    def logo(self) -> str:
        """Gets the logo of this Organization.

        An associated logo.  # noqa: E501

        :return: The logo of this Organization.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo: str):
        """Sets the logo of this Organization.

        An associated logo.  # noqa: E501

        :param logo: The logo of this Organization.
        :type logo: str
        """

        self._logo = logo

    @property
    def employees(self) -> object:
        """Gets the employees of this Organization.

        People working for this organization.  # noqa: E501

        :return: The employees of this Organization.
        :rtype: object
        """
        return self._employees

    @employees.setter
    def employees(self, employees: object):
        """Sets the employees of this Organization.

        People working for this organization.  # noqa: E501

        :param employees: The employees of this Organization.
        :type employees: object
        """

        self._employees = employees

    @property
    def telephone(self) -> str:
        """Gets the telephone of this Organization.

        The telephone number.  # noqa: E501

        :return: The telephone of this Organization.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """Sets the telephone of this Organization.

        The telephone number.  # noqa: E501

        :param telephone: The telephone of this Organization.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def email(self) -> str:
        """Gets the email of this Organization.

        Email address.  # noqa: E501

        :return: The email of this Organization.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Organization.

        Email address.  # noqa: E501

        :param email: The email of this Organization.
        :type email: str
        """

        self._email = email

    @property
    def department(self) -> object:
        """Gets the department of this Organization.

        A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.  # noqa: E501

        :return: The department of this Organization.
        :rtype: object
        """
        return self._department

    @department.setter
    def department(self, department: object):
        """Sets the department of this Organization.

        A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.  # noqa: E501

        :param department: The department of this Organization.
        :type department: object
        """

        self._department = department

    @property
    def contact_point(self) -> object:
        """Gets the contact_point of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_point of this Organization.
        :rtype: object
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point: object):
        """Sets the contact_point of this Organization.

        A contact point for a person or organization.  # noqa: E501

        :param contact_point: The contact_point of this Organization.
        :type contact_point: object
        """

        self._contact_point = contact_point

    @property
    def parent_organization(self) -> object:
        """Gets the parent_organization of this Organization.

        The larger organization that this organization is a subOrganization of, if any.  # noqa: E501

        :return: The parent_organization of this Organization.
        :rtype: object
        """
        return self._parent_organization

    @parent_organization.setter
    def parent_organization(self, parent_organization: object):
        """Sets the parent_organization of this Organization.

        The larger organization that this organization is a subOrganization of, if any.  # noqa: E501

        :param parent_organization: The parent_organization of this Organization.
        :type parent_organization: object
        """

        self._parent_organization = parent_organization

    @property
    def legal_name(self) -> str:
        """Gets the legal_name of this Organization.

        The official name of the organization, e.g. the registered company name.  # noqa: E501

        :return: The legal_name of this Organization.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name: str):
        """Sets the legal_name of this Organization.

        The official name of the organization, e.g. the registered company name.  # noqa: E501

        :param legal_name: The legal_name of this Organization.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def founding_date(self) -> datetime:
        """Gets the founding_date of this Organization.

        The date that this organization was founded.  # noqa: E501

        :return: The founding_date of this Organization.
        :rtype: datetime
        """
        return self._founding_date

    @founding_date.setter
    def founding_date(self, founding_date: datetime):
        """Sets the founding_date of this Organization.

        The date that this organization was founded.  # noqa: E501

        :param founding_date: The founding_date of this Organization.
        :type founding_date: datetime
        """

        self._founding_date = founding_date

    @property
    def employee(self) -> object:
        """Gets the employee of this Organization.

        Someone working for this organization.  # noqa: E501

        :return: The employee of this Organization.
        :rtype: object
        """
        return self._employee

    @employee.setter
    def employee(self, employee: object):
        """Sets the employee of this Organization.

        Someone working for this organization.  # noqa: E501

        :param employee: The employee of this Organization.
        :type employee: object
        """

        self._employee = employee

    @property
    def number_of_employees(self) -> object:
        """Gets the number_of_employees of this Organization.

        The number of employees in an organization e.g. business.  # noqa: E501

        :return: The number_of_employees of this Organization.
        :rtype: object
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees: object):
        """Sets the number_of_employees of this Organization.

        The number of employees in an organization e.g. business.  # noqa: E501

        :param number_of_employees: The number_of_employees of this Organization.
        :type number_of_employees: object
        """

        self._number_of_employees = number_of_employees

    @property
    def naics(self) -> str:
        """Gets the naics of this Organization.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :return: The naics of this Organization.
        :rtype: str
        """
        return self._naics

    @naics.setter
    def naics(self, naics: str):
        """Sets the naics of this Organization.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :param naics: The naics of this Organization.
        :type naics: str
        """

        self._naics = naics

    @property
    def has_pos(self) -> object:
        """Gets the has_pos of this Organization.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :return: The has_pos of this Organization.
        :rtype: object
        """
        return self._has_pos

    @has_pos.setter
    def has_pos(self, has_pos: object):
        """Sets the has_pos of this Organization.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :param has_pos: The has_pos of this Organization.
        :type has_pos: object
        """

        self._has_pos = has_pos

    @property
    def review(self) -> object:
        """Gets the review of this Organization.

        A review of the item.  # noqa: E501

        :return: The review of this Organization.
        :rtype: object
        """
        return self._review

    @review.setter
    def review(self, review: object):
        """Sets the review of this Organization.

        A review of the item.  # noqa: E501

        :param review: The review of this Organization.
        :type review: object
        """

        self._review = review

    @property
    def founding_location(self) -> object:
        """Gets the founding_location of this Organization.

        The place where the Organization was founded.  # noqa: E501

        :return: The founding_location of this Organization.
        :rtype: object
        """
        return self._founding_location

    @founding_location.setter
    def founding_location(self, founding_location: object):
        """Sets the founding_location of this Organization.

        The place where the Organization was founded.  # noqa: E501

        :param founding_location: The founding_location of this Organization.
        :type founding_location: object
        """

        self._founding_location = founding_location

    @property
    def owns(self) -> object:
        """Gets the owns of this Organization.

        Products owned by the organization or person.  # noqa: E501

        :return: The owns of this Organization.
        :rtype: object
        """
        return self._owns

    @owns.setter
    def owns(self, owns: object):
        """Sets the owns of this Organization.

        Products owned by the organization or person.  # noqa: E501

        :param owns: The owns of this Organization.
        :type owns: object
        """

        self._owns = owns

    @property
    def event(self) -> object:
        """Gets the event of this Organization.

        Upcoming or past event associated with this place, organization, or action.  # noqa: E501

        :return: The event of this Organization.
        :rtype: object
        """
        return self._event

    @event.setter
    def event(self, event: object):
        """Sets the event of this Organization.

        Upcoming or past event associated with this place, organization, or action.  # noqa: E501

        :param event: The event of this Organization.
        :type event: object
        """

        self._event = event

    @property
    def founder(self) -> object:
        """Gets the founder of this Organization.

        A person who founded this organization.  # noqa: E501

        :return: The founder of this Organization.
        :rtype: object
        """
        return self._founder

    @founder.setter
    def founder(self, founder: object):
        """Sets the founder of this Organization.

        A person who founded this organization.  # noqa: E501

        :param founder: The founder of this Organization.
        :type founder: object
        """

        self._founder = founder

    @property
    def publishing_principles(self) -> object:
        """Gets the publishing_principles of this Organization.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :return: The publishing_principles of this Organization.
        :rtype: object
        """
        return self._publishing_principles

    @publishing_principles.setter
    def publishing_principles(self, publishing_principles: object):
        """Sets the publishing_principles of this Organization.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :param publishing_principles: The publishing_principles of this Organization.
        :type publishing_principles: object
        """

        self._publishing_principles = publishing_principles

    @property
    def sponsor(self) -> object:
        """Gets the sponsor of this Organization.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :return: The sponsor of this Organization.
        :rtype: object
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor: object):
        """Sets the sponsor of this Organization.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :param sponsor: The sponsor of this Organization.
        :type sponsor: object
        """

        self._sponsor = sponsor

    @property
    def isic_v4(self) -> str:
        """Gets the isic_v4 of this Organization.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :return: The isic_v4 of this Organization.
        :rtype: str
        """
        return self._isic_v4

    @isic_v4.setter
    def isic_v4(self, isic_v4: str):
        """Sets the isic_v4 of this Organization.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :param isic_v4: The isic_v4 of this Organization.
        :type isic_v4: str
        """

        self._isic_v4 = isic_v4

    @property
    def location(self) -> object:
        """Gets the location of this Organization.

        The location of for example where the event is happening, an organization is located, or where an action takes place.  # noqa: E501

        :return: The location of this Organization.
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location: object):
        """Sets the location of this Organization.

        The location of for example where the event is happening, an organization is located, or where an action takes place.  # noqa: E501

        :param location: The location of this Organization.
        :type location: object
        """

        self._location = location

    @property
    def brand(self) -> object:
        """Gets the brand of this Organization.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :return: The brand of this Organization.
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand: object):
        """Sets the brand of this Organization.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :param brand: The brand of this Organization.
        :type brand: object
        """

        self._brand = brand

    @property
    def vat_id(self) -> str:
        """Gets the vat_id of this Organization.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :return: The vat_id of this Organization.
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id: str):
        """Sets the vat_id of this Organization.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :param vat_id: The vat_id of this Organization.
        :type vat_id: str
        """

        self._vat_id = vat_id

    @property
    def lei_code(self) -> str:
        """Gets the lei_code of this Organization.

        An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.  # noqa: E501

        :return: The lei_code of this Organization.
        :rtype: str
        """
        return self._lei_code

    @lei_code.setter
    def lei_code(self, lei_code: str):
        """Sets the lei_code of this Organization.

        An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.  # noqa: E501

        :param lei_code: The lei_code of this Organization.
        :type lei_code: str
        """

        self._lei_code = lei_code

    @property
    def fax_number(self) -> str:
        """Gets the fax_number of this Organization.

        The fax number.  # noqa: E501

        :return: The fax_number of this Organization.
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number: str):
        """Sets the fax_number of this Organization.

        The fax number.  # noqa: E501

        :param fax_number: The fax_number of this Organization.
        :type fax_number: str
        """

        self._fax_number = fax_number

    @property
    def same_as(self) -> str:
        """Gets the same_as of this Organization.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this Organization.
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as: str):
        """Sets the same_as of this Organization.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this Organization.
        :type same_as: str
        """

        self._same_as = same_as

    @property
    def url(self) -> str:
        """Gets the url of this Organization.

        URL of the item.  # noqa: E501

        :return: The url of this Organization.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Organization.

        URL of the item.  # noqa: E501

        :param url: The url of this Organization.
        :type url: str
        """

        self._url = url

    @property
    def image(self) -> object:
        """Gets the image of this Organization.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this Organization.
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image: object):
        """Sets the image of this Organization.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this Organization.
        :type image: object
        """

        self._image = image

    @property
    def additional_type(self) -> str:
        """Gets the additional_type of this Organization.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this Organization.
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type: str):
        """Sets the additional_type of this Organization.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this Organization.
        :type additional_type: str
        """

        self._additional_type = additional_type

    @property
    def name(self) -> str:
        """Gets the name of this Organization.

        The name of the item.  # noqa: E501

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Organization.

        The name of the item.  # noqa: E501

        :param name: The name of this Organization.
        :type name: str
        """

        self._name = name

    @property
    def identifier(self) -> str:
        """Gets the identifier of this Organization.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The identifier of this Organization.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this Organization.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param identifier: The identifier of this Organization.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def potential_action(self) -> object:
        """Gets the potential_action of this Organization.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this Organization.
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action: object):
        """Sets the potential_action of this Organization.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this Organization.
        :type potential_action: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self) -> str:
        """Gets the main_entity_of_page of this Organization.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this Organization.
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page: str):
        """Sets the main_entity_of_page of this Organization.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this Organization.
        :type main_entity_of_page: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self) -> str:
        """Gets the description of this Organization.

        A description of the item.  # noqa: E501

        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Organization.

        A description of the item.  # noqa: E501

        :param description: The description of this Organization.
        :type description: str
        """

        self._description = description

    @property
    def disambiguating_description(self) -> str:
        """Gets the disambiguating_description of this Organization.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this Organization.
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description: str):
        """Sets the disambiguating_description of this Organization.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this Organization.
        :type disambiguating_description: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self) -> str:
        """Gets the alternate_name of this Organization.

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this Organization.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name: str):
        """Sets the alternate_name of this Organization.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this Organization.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name
