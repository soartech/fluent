# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from activity_index_server.models.base_model_ import Model
from activity_index_server import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, spouse: object=None, funder: object=None, colleague: object=None, death_date: datetime=None, member_of: object=None, height: object=None, work_location: object=None, net_worth: object=None, children: object=None, job_title: str=None, has_offer_catalog: object=None, death_place: object=None, global_location_number: str=None, birth_place: object=None, gender: str=None, alumni_of: object=None, home_location: object=None, duns: str=None, tax_id: str=None, award: str=None, birth_date: datetime=None, makes_offer: object=None, given_name: str=None, contact_points: object=None, awards: str=None, family_name: str=None, seeks: object=None, sibling: object=None, address: object=None, performer_in: object=None, honorific_prefix: str=None, additional_name: str=None, siblings: object=None, telephone: str=None, email: str=None, weight: object=None, contact_point: object=None, parents: object=None, naics: str=None, has_pos: object=None, parent: object=None, owns: object=None, affiliation: object=None, publishing_principles: object=None, sponsor: object=None, isic_v4: str=None, brand: object=None, honorific_suffix: str=None, vat_id: str=None, nationality: object=None, fax_number: str=None, related_to: object=None, follows: object=None, knows: object=None, works_for: object=None, same_as: str=None, url: str=None, image: str=None, additional_type: str=None, name: str=None, identifier: str=None, potential_action: object=None, main_entity_of_page: str=None, description: str=None, disambiguating_description: str=None, alternate_name: str=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param spouse: The spouse of this Person.  # noqa: E501
        :type spouse: object
        :param funder: The funder of this Person.  # noqa: E501
        :type funder: object
        :param colleague: The colleague of this Person.  # noqa: E501
        :type colleague: object
        :param death_date: The death_date of this Person.  # noqa: E501
        :type death_date: datetime
        :param member_of: The member_of of this Person.  # noqa: E501
        :type member_of: object
        :param height: The height of this Person.  # noqa: E501
        :type height: object
        :param work_location: The work_location of this Person.  # noqa: E501
        :type work_location: object
        :param net_worth: The net_worth of this Person.  # noqa: E501
        :type net_worth: object
        :param children: The children of this Person.  # noqa: E501
        :type children: object
        :param job_title: The job_title of this Person.  # noqa: E501
        :type job_title: str
        :param has_offer_catalog: The has_offer_catalog of this Person.  # noqa: E501
        :type has_offer_catalog: object
        :param death_place: The death_place of this Person.  # noqa: E501
        :type death_place: object
        :param global_location_number: The global_location_number of this Person.  # noqa: E501
        :type global_location_number: str
        :param birth_place: The birth_place of this Person.  # noqa: E501
        :type birth_place: object
        :param gender: The gender of this Person.  # noqa: E501
        :type gender: str
        :param alumni_of: The alumni_of of this Person.  # noqa: E501
        :type alumni_of: object
        :param home_location: The home_location of this Person.  # noqa: E501
        :type home_location: object
        :param duns: The duns of this Person.  # noqa: E501
        :type duns: str
        :param tax_id: The tax_id of this Person.  # noqa: E501
        :type tax_id: str
        :param award: The award of this Person.  # noqa: E501
        :type award: str
        :param birth_date: The birth_date of this Person.  # noqa: E501
        :type birth_date: datetime
        :param makes_offer: The makes_offer of this Person.  # noqa: E501
        :type makes_offer: object
        :param given_name: The given_name of this Person.  # noqa: E501
        :type given_name: str
        :param contact_points: The contact_points of this Person.  # noqa: E501
        :type contact_points: object
        :param awards: The awards of this Person.  # noqa: E501
        :type awards: str
        :param family_name: The family_name of this Person.  # noqa: E501
        :type family_name: str
        :param seeks: The seeks of this Person.  # noqa: E501
        :type seeks: object
        :param sibling: The sibling of this Person.  # noqa: E501
        :type sibling: object
        :param address: The address of this Person.  # noqa: E501
        :type address: object
        :param performer_in: The performer_in of this Person.  # noqa: E501
        :type performer_in: object
        :param honorific_prefix: The honorific_prefix of this Person.  # noqa: E501
        :type honorific_prefix: str
        :param additional_name: The additional_name of this Person.  # noqa: E501
        :type additional_name: str
        :param siblings: The siblings of this Person.  # noqa: E501
        :type siblings: object
        :param telephone: The telephone of this Person.  # noqa: E501
        :type telephone: str
        :param email: The email of this Person.  # noqa: E501
        :type email: str
        :param weight: The weight of this Person.  # noqa: E501
        :type weight: object
        :param contact_point: The contact_point of this Person.  # noqa: E501
        :type contact_point: object
        :param parents: The parents of this Person.  # noqa: E501
        :type parents: object
        :param naics: The naics of this Person.  # noqa: E501
        :type naics: str
        :param has_pos: The has_pos of this Person.  # noqa: E501
        :type has_pos: object
        :param parent: The parent of this Person.  # noqa: E501
        :type parent: object
        :param owns: The owns of this Person.  # noqa: E501
        :type owns: object
        :param affiliation: The affiliation of this Person.  # noqa: E501
        :type affiliation: object
        :param publishing_principles: The publishing_principles of this Person.  # noqa: E501
        :type publishing_principles: object
        :param sponsor: The sponsor of this Person.  # noqa: E501
        :type sponsor: object
        :param isic_v4: The isic_v4 of this Person.  # noqa: E501
        :type isic_v4: str
        :param brand: The brand of this Person.  # noqa: E501
        :type brand: object
        :param honorific_suffix: The honorific_suffix of this Person.  # noqa: E501
        :type honorific_suffix: str
        :param vat_id: The vat_id of this Person.  # noqa: E501
        :type vat_id: str
        :param nationality: The nationality of this Person.  # noqa: E501
        :type nationality: object
        :param fax_number: The fax_number of this Person.  # noqa: E501
        :type fax_number: str
        :param related_to: The related_to of this Person.  # noqa: E501
        :type related_to: object
        :param follows: The follows of this Person.  # noqa: E501
        :type follows: object
        :param knows: The knows of this Person.  # noqa: E501
        :type knows: object
        :param works_for: The works_for of this Person.  # noqa: E501
        :type works_for: object
        :param same_as: The same_as of this Person.  # noqa: E501
        :type same_as: str
        :param url: The url of this Person.  # noqa: E501
        :type url: str
        :param image: The image of this Person.  # noqa: E501
        :type image: str
        :param additional_type: The additional_type of this Person.  # noqa: E501
        :type additional_type: str
        :param name: The name of this Person.  # noqa: E501
        :type name: str
        :param identifier: The identifier of this Person.  # noqa: E501
        :type identifier: str
        :param potential_action: The potential_action of this Person.  # noqa: E501
        :type potential_action: object
        :param main_entity_of_page: The main_entity_of_page of this Person.  # noqa: E501
        :type main_entity_of_page: str
        :param description: The description of this Person.  # noqa: E501
        :type description: str
        :param disambiguating_description: The disambiguating_description of this Person.  # noqa: E501
        :type disambiguating_description: str
        :param alternate_name: The alternate_name of this Person.  # noqa: E501
        :type alternate_name: str
        """
        self.swagger_types = {
            'spouse': object,
            'funder': object,
            'colleague': object,
            'death_date': datetime,
            'member_of': object,
            'height': object,
            'work_location': object,
            'net_worth': object,
            'children': object,
            'job_title': str,
            'has_offer_catalog': object,
            'death_place': object,
            'global_location_number': str,
            'birth_place': object,
            'gender': str,
            'alumni_of': object,
            'home_location': object,
            'duns': str,
            'tax_id': str,
            'award': str,
            'birth_date': datetime,
            'makes_offer': object,
            'given_name': str,
            'contact_points': object,
            'awards': str,
            'family_name': str,
            'seeks': object,
            'sibling': object,
            'address': object,
            'performer_in': object,
            'honorific_prefix': str,
            'additional_name': str,
            'siblings': object,
            'telephone': str,
            'email': str,
            'weight': object,
            'contact_point': object,
            'parents': object,
            'naics': str,
            'has_pos': object,
            'parent': object,
            'owns': object,
            'affiliation': object,
            'publishing_principles': object,
            'sponsor': object,
            'isic_v4': str,
            'brand': object,
            'honorific_suffix': str,
            'vat_id': str,
            'nationality': object,
            'fax_number': str,
            'related_to': object,
            'follows': object,
            'knows': object,
            'works_for': object,
            'same_as': str,
            'url': str,
            'image': str,
            'additional_type': str,
            'name': str,
            'identifier': str,
            'potential_action': object,
            'main_entity_of_page': str,
            'description': str,
            'disambiguating_description': str,
            'alternate_name': str
        }

        self.attribute_map = {
            'spouse': 'spouse',
            'funder': 'funder',
            'colleague': 'colleague',
            'death_date': 'deathDate',
            'member_of': 'memberOf',
            'height': 'height',
            'work_location': 'workLocation',
            'net_worth': 'netWorth',
            'children': 'children',
            'job_title': 'jobTitle',
            'has_offer_catalog': 'hasOfferCatalog',
            'death_place': 'deathPlace',
            'global_location_number': 'globalLocationNumber',
            'birth_place': 'birthPlace',
            'gender': 'gender',
            'alumni_of': 'alumniOf',
            'home_location': 'homeLocation',
            'duns': 'duns',
            'tax_id': 'taxID',
            'award': 'award',
            'birth_date': 'birthDate',
            'makes_offer': 'makesOffer',
            'given_name': 'givenName',
            'contact_points': 'contactPoints',
            'awards': 'awards',
            'family_name': 'familyName',
            'seeks': 'seeks',
            'sibling': 'sibling',
            'address': 'address',
            'performer_in': 'performerIn',
            'honorific_prefix': 'honorificPrefix',
            'additional_name': 'additionalName',
            'siblings': 'siblings',
            'telephone': 'telephone',
            'email': 'email',
            'weight': 'weight',
            'contact_point': 'contactPoint',
            'parents': 'parents',
            'naics': 'naics',
            'has_pos': 'hasPOS',
            'parent': 'parent',
            'owns': 'owns',
            'affiliation': 'affiliation',
            'publishing_principles': 'publishingPrinciples',
            'sponsor': 'sponsor',
            'isic_v4': 'isicV4',
            'brand': 'brand',
            'honorific_suffix': 'honorificSuffix',
            'vat_id': 'vatID',
            'nationality': 'nationality',
            'fax_number': 'faxNumber',
            'related_to': 'relatedTo',
            'follows': 'follows',
            'knows': 'knows',
            'works_for': 'worksFor',
            'same_as': 'sameAs',
            'url': 'url',
            'image': 'image',
            'additional_type': 'additionalType',
            'name': 'name',
            'identifier': 'identifier',
            'potential_action': 'potentialAction',
            'main_entity_of_page': 'mainEntityOfPage',
            'description': 'description',
            'disambiguating_description': 'disambiguatingDescription',
            'alternate_name': 'alternateName'
        }

        self._spouse = spouse
        self._funder = funder
        self._colleague = colleague
        self._death_date = death_date
        self._member_of = member_of
        self._height = height
        self._work_location = work_location
        self._net_worth = net_worth
        self._children = children
        self._job_title = job_title
        self._has_offer_catalog = has_offer_catalog
        self._death_place = death_place
        self._global_location_number = global_location_number
        self._birth_place = birth_place
        self._gender = gender
        self._alumni_of = alumni_of
        self._home_location = home_location
        self._duns = duns
        self._tax_id = tax_id
        self._award = award
        self._birth_date = birth_date
        self._makes_offer = makes_offer
        self._given_name = given_name
        self._contact_points = contact_points
        self._awards = awards
        self._family_name = family_name
        self._seeks = seeks
        self._sibling = sibling
        self._address = address
        self._performer_in = performer_in
        self._honorific_prefix = honorific_prefix
        self._additional_name = additional_name
        self._siblings = siblings
        self._telephone = telephone
        self._email = email
        self._weight = weight
        self._contact_point = contact_point
        self._parents = parents
        self._naics = naics
        self._has_pos = has_pos
        self._parent = parent
        self._owns = owns
        self._affiliation = affiliation
        self._publishing_principles = publishing_principles
        self._sponsor = sponsor
        self._isic_v4 = isic_v4
        self._brand = brand
        self._honorific_suffix = honorific_suffix
        self._vat_id = vat_id
        self._nationality = nationality
        self._fax_number = fax_number
        self._related_to = related_to
        self._follows = follows
        self._knows = knows
        self._works_for = works_for
        self._same_as = same_as
        self._url = url
        self._image = image
        self._additional_type = additional_type
        self._name = name
        self._identifier = identifier
        self._potential_action = potential_action
        self._main_entity_of_page = main_entity_of_page
        self._description = description
        self._disambiguating_description = disambiguating_description
        self._alternate_name = alternate_name

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spouse(self) -> object:
        """Gets the spouse of this Person.

        The person s spouse.  # noqa: E501

        :return: The spouse of this Person.
        :rtype: object
        """
        return self._spouse

    @spouse.setter
    def spouse(self, spouse: object):
        """Sets the spouse of this Person.

        The person s spouse.  # noqa: E501

        :param spouse: The spouse of this Person.
        :type spouse: object
        """

        self._spouse = spouse

    @property
    def funder(self) -> object:
        """Gets the funder of this Person.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :return: The funder of this Person.
        :rtype: object
        """
        return self._funder

    @funder.setter
    def funder(self, funder: object):
        """Sets the funder of this Person.

        A person or organization that supports (sponsors) something through some kind of financial contribution.  # noqa: E501

        :param funder: The funder of this Person.
        :type funder: object
        """

        self._funder = funder

    @property
    def colleague(self) -> object:
        """Gets the colleague of this Person.

        A colleague of the person. Supersedes colleagues.  # noqa: E501

        :return: The colleague of this Person.
        :rtype: object
        """
        return self._colleague

    @colleague.setter
    def colleague(self, colleague: object):
        """Sets the colleague of this Person.

        A colleague of the person. Supersedes colleagues.  # noqa: E501

        :param colleague: The colleague of this Person.
        :type colleague: object
        """

        self._colleague = colleague

    @property
    def death_date(self) -> datetime:
        """Gets the death_date of this Person.

        Date of death.  # noqa: E501

        :return: The death_date of this Person.
        :rtype: datetime
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date: datetime):
        """Sets the death_date of this Person.

        Date of death.  # noqa: E501

        :param death_date: The death_date of this Person.
        :type death_date: datetime
        """

        self._death_date = death_date

    @property
    def member_of(self) -> object:
        """Gets the member_of of this Person.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :return: The member_of of this Person.
        :rtype: object
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of: object):
        """Sets the member_of of this Person.

        An Organization (or ProgramMembership) to which this Person or Organization belongs.  # noqa: E501

        :param member_of: The member_of of this Person.
        :type member_of: object
        """

        self._member_of = member_of

    @property
    def height(self) -> object:
        """Gets the height of this Person.

        The height of the item.  # noqa: E501

        :return: The height of this Person.
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height: object):
        """Sets the height of this Person.

        The height of the item.  # noqa: E501

        :param height: The height of this Person.
        :type height: object
        """

        self._height = height

    @property
    def work_location(self) -> object:
        """Gets the work_location of this Person.

        A contact location for a person s place of work.  # noqa: E501

        :return: The work_location of this Person.
        :rtype: object
        """
        return self._work_location

    @work_location.setter
    def work_location(self, work_location: object):
        """Sets the work_location of this Person.

        A contact location for a person s place of work.  # noqa: E501

        :param work_location: The work_location of this Person.
        :type work_location: object
        """

        self._work_location = work_location

    @property
    def net_worth(self) -> object:
        """Gets the net_worth of this Person.

        The total financial value of the person as calculated by subtracting assets from liabilities.  # noqa: E501

        :return: The net_worth of this Person.
        :rtype: object
        """
        return self._net_worth

    @net_worth.setter
    def net_worth(self, net_worth: object):
        """Sets the net_worth of this Person.

        The total financial value of the person as calculated by subtracting assets from liabilities.  # noqa: E501

        :param net_worth: The net_worth of this Person.
        :type net_worth: object
        """

        self._net_worth = net_worth

    @property
    def children(self) -> object:
        """Gets the children of this Person.

        A child of the person.  # noqa: E501

        :return: The children of this Person.
        :rtype: object
        """
        return self._children

    @children.setter
    def children(self, children: object):
        """Sets the children of this Person.

        A child of the person.  # noqa: E501

        :param children: The children of this Person.
        :type children: object
        """

        self._children = children

    @property
    def job_title(self) -> str:
        """Gets the job_title of this Person.

        The job title of the person (for example, Financial Manager).  # noqa: E501

        :return: The job_title of this Person.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title: str):
        """Sets the job_title of this Person.

        The job title of the person (for example, Financial Manager).  # noqa: E501

        :param job_title: The job_title of this Person.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def has_offer_catalog(self) -> object:
        """Gets the has_offer_catalog of this Person.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :return: The has_offer_catalog of this Person.
        :rtype: object
        """
        return self._has_offer_catalog

    @has_offer_catalog.setter
    def has_offer_catalog(self, has_offer_catalog: object):
        """Sets the has_offer_catalog of this Person.

        Indicates an OfferCatalog listing for this Organization, Person, or Service.  # noqa: E501

        :param has_offer_catalog: The has_offer_catalog of this Person.
        :type has_offer_catalog: object
        """

        self._has_offer_catalog = has_offer_catalog

    @property
    def death_place(self) -> object:
        """Gets the death_place of this Person.

        The place where the person died.  # noqa: E501

        :return: The death_place of this Person.
        :rtype: object
        """
        return self._death_place

    @death_place.setter
    def death_place(self, death_place: object):
        """Sets the death_place of this Person.

        The place where the person died.  # noqa: E501

        :param death_place: The death_place of this Person.
        :type death_place: object
        """

        self._death_place = death_place

    @property
    def global_location_number(self) -> str:
        """Gets the global_location_number of this Person.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :return: The global_location_number of this Person.
        :rtype: str
        """
        return self._global_location_number

    @global_location_number.setter
    def global_location_number(self, global_location_number: str):
        """Sets the global_location_number of this Person.

        The Global Location Number (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.  # noqa: E501

        :param global_location_number: The global_location_number of this Person.
        :type global_location_number: str
        """

        self._global_location_number = global_location_number

    @property
    def birth_place(self) -> object:
        """Gets the birth_place of this Person.

        The place where the person was born.  # noqa: E501

        :return: The birth_place of this Person.
        :rtype: object
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place: object):
        """Sets the birth_place of this Person.

        The place where the person was born.  # noqa: E501

        :param birth_place: The birth_place of this Person.
        :type birth_place: object
        """

        self._birth_place = birth_place

    @property
    def gender(self) -> str:
        """Gets the gender of this Person.

        Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.  # noqa: E501

        :return: The gender of this Person.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Person.

        Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.  # noqa: E501

        :param gender: The gender of this Person.
        :type gender: str
        """

        self._gender = gender

    @property
    def alumni_of(self) -> object:
        """Gets the alumni_of of this Person.

        An organization that the person is an alumni of.  # noqa: E501

        :return: The alumni_of of this Person.
        :rtype: object
        """
        return self._alumni_of

    @alumni_of.setter
    def alumni_of(self, alumni_of: object):
        """Sets the alumni_of of this Person.

        An organization that the person is an alumni of.  # noqa: E501

        :param alumni_of: The alumni_of of this Person.
        :type alumni_of: object
        """

        self._alumni_of = alumni_of

    @property
    def home_location(self) -> object:
        """Gets the home_location of this Person.

        A contact location for a person s residence.  # noqa: E501

        :return: The home_location of this Person.
        :rtype: object
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location: object):
        """Sets the home_location of this Person.

        A contact location for a person s residence.  # noqa: E501

        :param home_location: The home_location of this Person.
        :type home_location: object
        """

        self._home_location = home_location

    @property
    def duns(self) -> str:
        """Gets the duns of this Person.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :return: The duns of this Person.
        :rtype: str
        """
        return self._duns

    @duns.setter
    def duns(self, duns: str):
        """Sets the duns of this Person.

        The Dun & Bradstreet DUNS number for identifying an organization or business person.  # noqa: E501

        :param duns: The duns of this Person.
        :type duns: str
        """

        self._duns = duns

    @property
    def tax_id(self) -> str:
        """Gets the tax_id of this Person.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :return: The tax_id of this Person.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: str):
        """Sets the tax_id of this Person.

        The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.  # noqa: E501

        :param tax_id: The tax_id of this Person.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def award(self) -> str:
        """Gets the award of this Person.

        An award won by or for this item.  # noqa: E501

        :return: The award of this Person.
        :rtype: str
        """
        return self._award

    @award.setter
    def award(self, award: str):
        """Sets the award of this Person.

        An award won by or for this item.  # noqa: E501

        :param award: The award of this Person.
        :type award: str
        """

        self._award = award

    @property
    def birth_date(self) -> datetime:
        """Gets the birth_date of this Person.

        Date of birth.  # noqa: E501

        :return: The birth_date of this Person.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: datetime):
        """Sets the birth_date of this Person.

        Date of birth.  # noqa: E501

        :param birth_date: The birth_date of this Person.
        :type birth_date: datetime
        """

        self._birth_date = birth_date

    @property
    def makes_offer(self) -> object:
        """Gets the makes_offer of this Person.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :return: The makes_offer of this Person.
        :rtype: object
        """
        return self._makes_offer

    @makes_offer.setter
    def makes_offer(self, makes_offer: object):
        """Sets the makes_offer of this Person.

        A pointer to products or services offered by the organization or person.  # noqa: E501

        :param makes_offer: The makes_offer of this Person.
        :type makes_offer: object
        """

        self._makes_offer = makes_offer

    @property
    def given_name(self) -> str:
        """Gets the given_name of this Person.

        Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.  # noqa: E501

        :return: The given_name of this Person.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name: str):
        """Sets the given_name of this Person.

        Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.  # noqa: E501

        :param given_name: The given_name of this Person.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def contact_points(self) -> object:
        """Gets the contact_points of this Person.

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_points of this Person.
        :rtype: object
        """
        return self._contact_points

    @contact_points.setter
    def contact_points(self, contact_points: object):
        """Sets the contact_points of this Person.

        A contact point for a person or organization.  # noqa: E501

        :param contact_points: The contact_points of this Person.
        :type contact_points: object
        """

        self._contact_points = contact_points

    @property
    def awards(self) -> str:
        """Gets the awards of this Person.

        Awards won by or for this item.  # noqa: E501

        :return: The awards of this Person.
        :rtype: str
        """
        return self._awards

    @awards.setter
    def awards(self, awards: str):
        """Sets the awards of this Person.

        Awards won by or for this item.  # noqa: E501

        :param awards: The awards of this Person.
        :type awards: str
        """

        self._awards = awards

    @property
    def family_name(self) -> str:
        """Gets the family_name of this Person.

        Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.  # noqa: E501

        :return: The family_name of this Person.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name: str):
        """Sets the family_name of this Person.

        Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.  # noqa: E501

        :param family_name: The family_name of this Person.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def seeks(self) -> object:
        """Gets the seeks of this Person.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :return: The seeks of this Person.
        :rtype: object
        """
        return self._seeks

    @seeks.setter
    def seeks(self, seeks: object):
        """Sets the seeks of this Person.

        A pointer to products or services sought by the organization or person (demand).  # noqa: E501

        :param seeks: The seeks of this Person.
        :type seeks: object
        """

        self._seeks = seeks

    @property
    def sibling(self) -> object:
        """Gets the sibling of this Person.

        A sibling of the person.  # noqa: E501

        :return: The sibling of this Person.
        :rtype: object
        """
        return self._sibling

    @sibling.setter
    def sibling(self, sibling: object):
        """Sets the sibling of this Person.

        A sibling of the person.  # noqa: E501

        :param sibling: The sibling of this Person.
        :type sibling: object
        """

        self._sibling = sibling

    @property
    def address(self) -> object:
        """Gets the address of this Person.

        Physical address of the item.  # noqa: E501

        :return: The address of this Person.
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address: object):
        """Sets the address of this Person.

        Physical address of the item.  # noqa: E501

        :param address: The address of this Person.
        :type address: object
        """

        self._address = address

    @property
    def performer_in(self) -> object:
        """Gets the performer_in of this Person.

        Event that this person is a performer or participant in.  # noqa: E501

        :return: The performer_in of this Person.
        :rtype: object
        """
        return self._performer_in

    @performer_in.setter
    def performer_in(self, performer_in: object):
        """Sets the performer_in of this Person.

        Event that this person is a performer or participant in.  # noqa: E501

        :param performer_in: The performer_in of this Person.
        :type performer_in: object
        """

        self._performer_in = performer_in

    @property
    def honorific_prefix(self) -> str:
        """Gets the honorific_prefix of this Person.

        An honorific prefix preceding a Person s name such as Dr/Mrs/Mr.  # noqa: E501

        :return: The honorific_prefix of this Person.
        :rtype: str
        """
        return self._honorific_prefix

    @honorific_prefix.setter
    def honorific_prefix(self, honorific_prefix: str):
        """Sets the honorific_prefix of this Person.

        An honorific prefix preceding a Person s name such as Dr/Mrs/Mr.  # noqa: E501

        :param honorific_prefix: The honorific_prefix of this Person.
        :type honorific_prefix: str
        """

        self._honorific_prefix = honorific_prefix

    @property
    def additional_name(self) -> str:
        """Gets the additional_name of this Person.

        An additional name for a Person, can be used for a middle name.  # noqa: E501

        :return: The additional_name of this Person.
        :rtype: str
        """
        return self._additional_name

    @additional_name.setter
    def additional_name(self, additional_name: str):
        """Sets the additional_name of this Person.

        An additional name for a Person, can be used for a middle name.  # noqa: E501

        :param additional_name: The additional_name of this Person.
        :type additional_name: str
        """

        self._additional_name = additional_name

    @property
    def siblings(self) -> object:
        """Gets the siblings of this Person.

        A sibling of the person.  # noqa: E501

        :return: The siblings of this Person.
        :rtype: object
        """
        return self._siblings

    @siblings.setter
    def siblings(self, siblings: object):
        """Sets the siblings of this Person.

        A sibling of the person.  # noqa: E501

        :param siblings: The siblings of this Person.
        :type siblings: object
        """

        self._siblings = siblings

    @property
    def telephone(self) -> str:
        """Gets the telephone of this Person.

        The telephone number.  # noqa: E501

        :return: The telephone of this Person.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """Sets the telephone of this Person.

        The telephone number.  # noqa: E501

        :param telephone: The telephone of this Person.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def email(self) -> str:
        """Gets the email of this Person.

        Email address.  # noqa: E501

        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Person.

        Email address.  # noqa: E501

        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def weight(self) -> object:
        """Gets the weight of this Person.

        The weight of the product or person.  # noqa: E501

        :return: The weight of this Person.
        :rtype: object
        """
        return self._weight

    @weight.setter
    def weight(self, weight: object):
        """Sets the weight of this Person.

        The weight of the product or person.  # noqa: E501

        :param weight: The weight of this Person.
        :type weight: object
        """

        self._weight = weight

    @property
    def contact_point(self) -> object:
        """Gets the contact_point of this Person.

        A contact point for a person or organization.  # noqa: E501

        :return: The contact_point of this Person.
        :rtype: object
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point: object):
        """Sets the contact_point of this Person.

        A contact point for a person or organization.  # noqa: E501

        :param contact_point: The contact_point of this Person.
        :type contact_point: object
        """

        self._contact_point = contact_point

    @property
    def parents(self) -> object:
        """Gets the parents of this Person.

        A parents of the person.  # noqa: E501

        :return: The parents of this Person.
        :rtype: object
        """
        return self._parents

    @parents.setter
    def parents(self, parents: object):
        """Sets the parents of this Person.

        A parents of the person.  # noqa: E501

        :param parents: The parents of this Person.
        :type parents: object
        """

        self._parents = parents

    @property
    def naics(self) -> str:
        """Gets the naics of this Person.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :return: The naics of this Person.
        :rtype: str
        """
        return self._naics

    @naics.setter
    def naics(self, naics: str):
        """Sets the naics of this Person.

        The North American Industry Classification System (NAICS) code for a particular organization or business person.  # noqa: E501

        :param naics: The naics of this Person.
        :type naics: str
        """

        self._naics = naics

    @property
    def has_pos(self) -> object:
        """Gets the has_pos of this Person.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :return: The has_pos of this Person.
        :rtype: object
        """
        return self._has_pos

    @has_pos.setter
    def has_pos(self, has_pos: object):
        """Sets the has_pos of this Person.

        Points-of-Sales operated by the organization or person.  # noqa: E501

        :param has_pos: The has_pos of this Person.
        :type has_pos: object
        """

        self._has_pos = has_pos

    @property
    def parent(self) -> object:
        """Gets the parent of this Person.

        A parent of this person.  # noqa: E501

        :return: The parent of this Person.
        :rtype: object
        """
        return self._parent

    @parent.setter
    def parent(self, parent: object):
        """Sets the parent of this Person.

        A parent of this person.  # noqa: E501

        :param parent: The parent of this Person.
        :type parent: object
        """

        self._parent = parent

    @property
    def owns(self) -> object:
        """Gets the owns of this Person.

        Products owned by the organization or person.  # noqa: E501

        :return: The owns of this Person.
        :rtype: object
        """
        return self._owns

    @owns.setter
    def owns(self, owns: object):
        """Sets the owns of this Person.

        Products owned by the organization or person.  # noqa: E501

        :param owns: The owns of this Person.
        :type owns: object
        """

        self._owns = owns

    @property
    def affiliation(self) -> object:
        """Gets the affiliation of this Person.

        An organization that this person is affiliated with. For example, a school/university, a club, or a team.  # noqa: E501

        :return: The affiliation of this Person.
        :rtype: object
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation: object):
        """Sets the affiliation of this Person.

        An organization that this person is affiliated with. For example, a school/university, a club, or a team.  # noqa: E501

        :param affiliation: The affiliation of this Person.
        :type affiliation: object
        """

        self._affiliation = affiliation

    @property
    def publishing_principles(self) -> object:
        """Gets the publishing_principles of this Person.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :return: The publishing_principles of this Person.
        :rtype: object
        """
        return self._publishing_principles

    @publishing_principles.setter
    def publishing_principles(self, publishing_principles: object):
        """Sets the publishing_principles of this Person.

        The publishingPrinciples property indicates (typically via URL) a document describing the editorial principles of an Organization (or individual e.g. a Person writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a CreativeWork (e.g. NewsArticle) the principles are those of the party primarily responsible for the creation of the CreativeWork.  While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a funder) can be expressed using schema.org terminology.  # noqa: E501

        :param publishing_principles: The publishing_principles of this Person.
        :type publishing_principles: object
        """

        self._publishing_principles = publishing_principles

    @property
    def sponsor(self) -> object:
        """Gets the sponsor of this Person.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :return: The sponsor of this Person.
        :rtype: object
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor: object):
        """Sets the sponsor of this Person.

        A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.  # noqa: E501

        :param sponsor: The sponsor of this Person.
        :type sponsor: object
        """

        self._sponsor = sponsor

    @property
    def isic_v4(self) -> str:
        """Gets the isic_v4 of this Person.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :return: The isic_v4 of this Person.
        :rtype: str
        """
        return self._isic_v4

    @isic_v4.setter
    def isic_v4(self, isic_v4: str):
        """Sets the isic_v4 of this Person.

        The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.  # noqa: E501

        :param isic_v4: The isic_v4 of this Person.
        :type isic_v4: str
        """

        self._isic_v4 = isic_v4

    @property
    def brand(self) -> object:
        """Gets the brand of this Person.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :return: The brand of this Person.
        :rtype: object
        """
        return self._brand

    @brand.setter
    def brand(self, brand: object):
        """Sets the brand of this Person.

        The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.  # noqa: E501

        :param brand: The brand of this Person.
        :type brand: object
        """

        self._brand = brand

    @property
    def honorific_suffix(self) -> str:
        """Gets the honorific_suffix of this Person.

        An honorific suffix preceding a Person s name such as M.D. /PhD/MSCSW.  # noqa: E501

        :return: The honorific_suffix of this Person.
        :rtype: str
        """
        return self._honorific_suffix

    @honorific_suffix.setter
    def honorific_suffix(self, honorific_suffix: str):
        """Sets the honorific_suffix of this Person.

        An honorific suffix preceding a Person s name such as M.D. /PhD/MSCSW.  # noqa: E501

        :param honorific_suffix: The honorific_suffix of this Person.
        :type honorific_suffix: str
        """

        self._honorific_suffix = honorific_suffix

    @property
    def vat_id(self) -> str:
        """Gets the vat_id of this Person.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :return: The vat_id of this Person.
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id: str):
        """Sets the vat_id of this Person.

        The Value-added Tax ID of the organization or person.  # noqa: E501

        :param vat_id: The vat_id of this Person.
        :type vat_id: str
        """

        self._vat_id = vat_id

    @property
    def nationality(self) -> object:
        """Gets the nationality of this Person.

        Nationality of the person.  # noqa: E501

        :return: The nationality of this Person.
        :rtype: object
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality: object):
        """Sets the nationality of this Person.

        Nationality of the person.  # noqa: E501

        :param nationality: The nationality of this Person.
        :type nationality: object
        """

        self._nationality = nationality

    @property
    def fax_number(self) -> str:
        """Gets the fax_number of this Person.

        The fax number.  # noqa: E501

        :return: The fax_number of this Person.
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number: str):
        """Sets the fax_number of this Person.

        The fax number.  # noqa: E501

        :param fax_number: The fax_number of this Person.
        :type fax_number: str
        """

        self._fax_number = fax_number

    @property
    def related_to(self) -> object:
        """Gets the related_to of this Person.

        The most generic familial relation.  # noqa: E501

        :return: The related_to of this Person.
        :rtype: object
        """
        return self._related_to

    @related_to.setter
    def related_to(self, related_to: object):
        """Sets the related_to of this Person.

        The most generic familial relation.  # noqa: E501

        :param related_to: The related_to of this Person.
        :type related_to: object
        """

        self._related_to = related_to

    @property
    def follows(self) -> object:
        """Gets the follows of this Person.

        The most generic uni-directional social relation.  # noqa: E501

        :return: The follows of this Person.
        :rtype: object
        """
        return self._follows

    @follows.setter
    def follows(self, follows: object):
        """Sets the follows of this Person.

        The most generic uni-directional social relation.  # noqa: E501

        :param follows: The follows of this Person.
        :type follows: object
        """

        self._follows = follows

    @property
    def knows(self) -> object:
        """Gets the knows of this Person.

        The most generic bi-directional social/work relation.  # noqa: E501

        :return: The knows of this Person.
        :rtype: object
        """
        return self._knows

    @knows.setter
    def knows(self, knows: object):
        """Sets the knows of this Person.

        The most generic bi-directional social/work relation.  # noqa: E501

        :param knows: The knows of this Person.
        :type knows: object
        """

        self._knows = knows

    @property
    def works_for(self) -> object:
        """Gets the works_for of this Person.

        Organizations that the person works for.  # noqa: E501

        :return: The works_for of this Person.
        :rtype: object
        """
        return self._works_for

    @works_for.setter
    def works_for(self, works_for: object):
        """Sets the works_for of this Person.

        Organizations that the person works for.  # noqa: E501

        :param works_for: The works_for of this Person.
        :type works_for: object
        """

        self._works_for = works_for

    @property
    def same_as(self) -> str:
        """Gets the same_as of this Person.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :return: The same_as of this Person.
        :rtype: str
        """
        return self._same_as

    @same_as.setter
    def same_as(self, same_as: str):
        """Sets the same_as of this Person.

        URL of a reference Web page that unambiguously indicates the item s identity. E.g. the URL of the item s Wikipedia page, Wikidata entry, or official website.  # noqa: E501

        :param same_as: The same_as of this Person.
        :type same_as: str
        """

        self._same_as = same_as

    @property
    def url(self) -> str:
        """Gets the url of this Person.

        URL of the item.  # noqa: E501

        :return: The url of this Person.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Person.

        URL of the item.  # noqa: E501

        :param url: The url of this Person.
        :type url: str
        """

        self._url = url

    @property
    def image(self) -> str:
        """Gets the image of this Person.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :return: The image of this Person.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Person.

        An image of the item. This can be a URL or a fully described ImageObject.  # noqa: E501

        :param image: The image of this Person.
        :type image: str
        """

        self._image = image

    @property
    def additional_type(self) -> str:
        """Gets the additional_type of this Person.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :return: The additional_type of this Person.
        :rtype: str
        """
        return self._additional_type

    @additional_type.setter
    def additional_type(self, additional_type: str):
        """Sets the additional_type of this Person.

        An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the  typeof  attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.  # noqa: E501

        :param additional_type: The additional_type of this Person.
        :type additional_type: str
        """

        self._additional_type = additional_type

    @property
    def name(self) -> str:
        """Gets the name of this Person.

        The name of the item.  # noqa: E501

        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Person.

        The name of the item.  # noqa: E501

        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def identifier(self) -> str:
        """Gets the identifier of this Person.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The identifier of this Person.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this Person.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param identifier: The identifier of this Person.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def potential_action(self) -> object:
        """Gets the potential_action of this Person.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :return: The potential_action of this Person.
        :rtype: object
        """
        return self._potential_action

    @potential_action.setter
    def potential_action(self, potential_action: object):
        """Sets the potential_action of this Person.

        Indicates a potential Action, which describes an idealized action in which this thing would play an  object  role.  # noqa: E501

        :param potential_action: The potential_action of this Person.
        :type potential_action: object
        """

        self._potential_action = potential_action

    @property
    def main_entity_of_page(self) -> str:
        """Gets the main_entity_of_page of this Person.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :return: The main_entity_of_page of this Person.
        :rtype: str
        """
        return self._main_entity_of_page

    @main_entity_of_page.setter
    def main_entity_of_page(self, main_entity_of_page: str):
        """Sets the main_entity_of_page of this Person.

        Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See background notes for details.  # noqa: E501

        :param main_entity_of_page: The main_entity_of_page of this Person.
        :type main_entity_of_page: str
        """

        self._main_entity_of_page = main_entity_of_page

    @property
    def description(self) -> str:
        """Gets the description of this Person.

        A description of the item.  # noqa: E501

        :return: The description of this Person.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Person.

        A description of the item.  # noqa: E501

        :param description: The description of this Person.
        :type description: str
        """

        self._description = description

    @property
    def disambiguating_description(self) -> str:
        """Gets the disambiguating_description of this Person.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :return: The disambiguating_description of this Person.
        :rtype: str
        """
        return self._disambiguating_description

    @disambiguating_description.setter
    def disambiguating_description(self, disambiguating_description: str):
        """Sets the disambiguating_description of this Person.

        A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.  # noqa: E501

        :param disambiguating_description: The disambiguating_description of this Person.
        :type disambiguating_description: str
        """

        self._disambiguating_description = disambiguating_description

    @property
    def alternate_name(self) -> str:
        """Gets the alternate_name of this Person.

        An alias for the item.  # noqa: E501

        :return: The alternate_name of this Person.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name: str):
        """Sets the alternate_name of this Person.

        An alias for the item.  # noqa: E501

        :param alternate_name: The alternate_name of this Person.
        :type alternate_name: str
        """

        self._alternate_name = alternate_name
