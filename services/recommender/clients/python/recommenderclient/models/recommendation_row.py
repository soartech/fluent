# coding: utf-8

"""
    Recommender API

    This is the API definition for the Recommender service.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from recommenderclient.models.recommended_activity import RecommendedActivity  # noqa: F401,E501


class RecommendationRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'strategy': 'str',
        'params': 'dict(str, str)',
        'activities': 'list[RecommendedActivity]'
    }

    attribute_map = {
        'type': '_type',
        'name': 'name',
        'strategy': 'strategy',
        'params': 'params',
        'activities': 'activities'
    }

    def __init__(self, type=None, name=None, strategy=None, params=None, activities=None):  # noqa: E501
        """RecommendationRow - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._name = None
        self._strategy = None
        self._params = None
        self._activities = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if strategy is not None:
            self.strategy = strategy
        if params is not None:
            self.params = params
        if activities is not None:
            self.activities = activities

    @property
    def type(self):
        """Gets the type of this RecommendationRow.  # noqa: E501


        :return: The type of this RecommendationRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationRow.


        :param type: The type of this RecommendationRow.  # noqa: E501
        :type: str
        """
        allowed_values = ["RecommendationRow"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this RecommendationRow.  # noqa: E501

        Display name of the recommendation row.  # noqa: E501

        :return: The name of this RecommendationRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationRow.

        Display name of the recommendation row.  # noqa: E501

        :param name: The name of this RecommendationRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def strategy(self):
        """Gets the strategy of this RecommendationRow.  # noqa: E501

        Strategy class used to make the recommendations in this row.  # noqa: E501

        :return: The strategy of this RecommendationRow.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this RecommendationRow.

        Strategy class used to make the recommendations in this row.  # noqa: E501

        :param strategy: The strategy of this RecommendationRow.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def params(self):
        """Gets the params of this RecommendationRow.  # noqa: E501

        Keys with string values, representing the parameters used to instantiate this strategy.  # noqa: E501

        :return: The params of this RecommendationRow.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this RecommendationRow.

        Keys with string values, representing the parameters used to instantiate this strategy.  # noqa: E501

        :param params: The params of this RecommendationRow.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def activities(self):
        """Gets the activities of this RecommendationRow.  # noqa: E501

        an array of recommendations in the form of activity ids  # noqa: E501

        :return: The activities of this RecommendationRow.  # noqa: E501
        :rtype: list[RecommendedActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this RecommendationRow.

        an array of recommendations in the form of activity ids  # noqa: E501

        :param activities: The activities of this RecommendationRow.  # noqa: E501
        :type: list[RecommendedActivity]
        """

        self._activities = activities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
