# coding: utf-8

"""
    Recommender API

    This is the API definition for the Recommender service.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecommendedActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'str',
        'tokens': 'int',
        'attempt_rate': 'float',
        'popularity_rating': 'float',
        'priority': 'float'
    }

    attribute_map = {
        'activity_id': 'activityId',
        'tokens': 'tokens',
        'attempt_rate': 'attemptRate',
        'popularity_rating': 'popularityRating',
        'priority': 'priority'
    }

    def __init__(self, activity_id=None, tokens=None, attempt_rate=None, popularity_rating=None, priority=None):  # noqa: E501
        """RecommendedActivity - a model defined in Swagger"""  # noqa: E501

        self._activity_id = None
        self._tokens = None
        self._attempt_rate = None
        self._popularity_rating = None
        self._priority = None
        self.discriminator = None

        if activity_id is not None:
            self.activity_id = activity_id
        if tokens is not None:
            self.tokens = tokens
        if attempt_rate is not None:
            self.attempt_rate = attempt_rate
        if popularity_rating is not None:
            self.popularity_rating = popularity_rating
        if priority is not None:
            self.priority = priority

    @property
    def activity_id(self):
        """Gets the activity_id of this RecommendedActivity.  # noqa: E501

        Unique ID for an activity  # noqa: E501

        :return: The activity_id of this RecommendedActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this RecommendedActivity.

        Unique ID for an activity  # noqa: E501

        :param activity_id: The activity_id of this RecommendedActivity.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def tokens(self):
        """Gets the tokens of this RecommendedActivity.  # noqa: E501

        Number of tokens the user gets if this activity is completed  # noqa: E501

        :return: The tokens of this RecommendedActivity.  # noqa: E501
        :rtype: int
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this RecommendedActivity.

        Number of tokens the user gets if this activity is completed  # noqa: E501

        :param tokens: The tokens of this RecommendedActivity.  # noqa: E501
        :type: int
        """

        self._tokens = tokens

    @property
    def attempt_rate(self):
        """Gets the attempt_rate of this RecommendedActivity.  # noqa: E501

        Popularity level based on attempt rates.  # noqa: E501

        :return: The attempt_rate of this RecommendedActivity.  # noqa: E501
        :rtype: float
        """
        return self._attempt_rate

    @attempt_rate.setter
    def attempt_rate(self, attempt_rate):
        """Sets the attempt_rate of this RecommendedActivity.

        Popularity level based on attempt rates.  # noqa: E501

        :param attempt_rate: The attempt_rate of this RecommendedActivity.  # noqa: E501
        :type: float
        """

        self._attempt_rate = attempt_rate

    @property
    def popularity_rating(self):
        """Gets the popularity_rating of this RecommendedActivity.  # noqa: E501

        Popularity rating based on user ratings.  # noqa: E501

        :return: The popularity_rating of this RecommendedActivity.  # noqa: E501
        :rtype: float
        """
        return self._popularity_rating

    @popularity_rating.setter
    def popularity_rating(self, popularity_rating):
        """Sets the popularity_rating of this RecommendedActivity.

        Popularity rating based on user ratings.  # noqa: E501

        :param popularity_rating: The popularity_rating of this RecommendedActivity.  # noqa: E501
        :type: float
        """

        self._popularity_rating = popularity_rating

    @property
    def priority(self):
        """Gets the priority of this RecommendedActivity.  # noqa: E501

        Priority value of the activity as determined by the recommendation strategy.  # noqa: E501

        :return: The priority of this RecommendedActivity.  # noqa: E501
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RecommendedActivity.

        Priority value of the activity as determined by the recommendation strategy.  # noqa: E501

        :param priority: The priority of this RecommendedActivity.  # noqa: E501
        :type: float
        """

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendedActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
