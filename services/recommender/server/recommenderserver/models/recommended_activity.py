# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from recommenderserver.models.base_model_ import Model
from recommenderserver import util


class RecommendedActivity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, activity_id: str=None, tokens: int=None, attempt_rate: float=None, popularity_rating: float=None, priority: float=None):  # noqa: E501
        """RecommendedActivity - a model defined in Swagger

        :param activity_id: The activity_id of this RecommendedActivity.  # noqa: E501
        :type activity_id: str
        :param tokens: The tokens of this RecommendedActivity.  # noqa: E501
        :type tokens: int
        :param attempt_rate: The attempt_rate of this RecommendedActivity.  # noqa: E501
        :type attempt_rate: float
        :param popularity_rating: The popularity_rating of this RecommendedActivity.  # noqa: E501
        :type popularity_rating: float
        :param priority: The priority of this RecommendedActivity.  # noqa: E501
        :type priority: float
        """
        self.swagger_types = {
            'activity_id': str,
            'tokens': int,
            'attempt_rate': float,
            'popularity_rating': float,
            'priority': float
        }

        self.attribute_map = {
            'activity_id': 'activityId',
            'tokens': 'tokens',
            'attempt_rate': 'attemptRate',
            'popularity_rating': 'popularityRating',
            'priority': 'priority'
        }

        self._activity_id = activity_id
        self._tokens = tokens
        self._attempt_rate = attempt_rate
        self._popularity_rating = popularity_rating
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt) -> 'RecommendedActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecommendedActivity of this RecommendedActivity.  # noqa: E501
        :rtype: RecommendedActivity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_id(self) -> str:
        """Gets the activity_id of this RecommendedActivity.

        Unique ID for an activity  # noqa: E501

        :return: The activity_id of this RecommendedActivity.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id: str):
        """Sets the activity_id of this RecommendedActivity.

        Unique ID for an activity  # noqa: E501

        :param activity_id: The activity_id of this RecommendedActivity.
        :type activity_id: str
        """

        self._activity_id = activity_id

    @property
    def tokens(self) -> int:
        """Gets the tokens of this RecommendedActivity.

        Number of tokens the user gets if this activity is completed  # noqa: E501

        :return: The tokens of this RecommendedActivity.
        :rtype: int
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens: int):
        """Sets the tokens of this RecommendedActivity.

        Number of tokens the user gets if this activity is completed  # noqa: E501

        :param tokens: The tokens of this RecommendedActivity.
        :type tokens: int
        """

        self._tokens = tokens

    @property
    def attempt_rate(self) -> float:
        """Gets the attempt_rate of this RecommendedActivity.

        Popularity level based on attempt rates.  # noqa: E501

        :return: The attempt_rate of this RecommendedActivity.
        :rtype: float
        """
        return self._attempt_rate

    @attempt_rate.setter
    def attempt_rate(self, attempt_rate: float):
        """Sets the attempt_rate of this RecommendedActivity.

        Popularity level based on attempt rates.  # noqa: E501

        :param attempt_rate: The attempt_rate of this RecommendedActivity.
        :type attempt_rate: float
        """

        self._attempt_rate = attempt_rate

    @property
    def popularity_rating(self) -> float:
        """Gets the popularity_rating of this RecommendedActivity.

        Popularity rating based on user ratings.  # noqa: E501

        :return: The popularity_rating of this RecommendedActivity.
        :rtype: float
        """
        return self._popularity_rating

    @popularity_rating.setter
    def popularity_rating(self, popularity_rating: float):
        """Sets the popularity_rating of this RecommendedActivity.

        Popularity rating based on user ratings.  # noqa: E501

        :param popularity_rating: The popularity_rating of this RecommendedActivity.
        :type popularity_rating: float
        """

        self._popularity_rating = popularity_rating

    @property
    def priority(self) -> float:
        """Gets the priority of this RecommendedActivity.

        Priority value of the activity as determined by the recommendation strategy.  # noqa: E501

        :return: The priority of this RecommendedActivity.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority: float):
        """Sets the priority of this RecommendedActivity.

        Priority value of the activity as determined by the recommendation strategy.  # noqa: E501

        :param priority: The priority of this RecommendedActivity.
        :type priority: float
        """

        self._priority = priority
