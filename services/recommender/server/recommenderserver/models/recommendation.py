# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from recommenderserver.models.base_model_ import Model
from recommenderserver.models.recommendation_row import RecommendationRow  # noqa: F401,E501
from recommenderserver.models.recommended_activity import RecommendedActivity  # noqa: F401,E501
from recommenderserver import util


class Recommendation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, timestamp: datetime=None, learner: str=None, assignment: RecommendedActivity=None, recommendations: List[RecommendationRow]=None):  # noqa: E501
        """Recommendation - a model defined in Swagger

        :param type: The type of this Recommendation.  # noqa: E501
        :type type: str
        :param timestamp: The timestamp of this Recommendation.  # noqa: E501
        :type timestamp: datetime
        :param learner: The learner of this Recommendation.  # noqa: E501
        :type learner: str
        :param assignment: The assignment of this Recommendation.  # noqa: E501
        :type assignment: RecommendedActivity
        :param recommendations: The recommendations of this Recommendation.  # noqa: E501
        :type recommendations: List[RecommendationRow]
        """
        self.swagger_types = {
            'type': str,
            'timestamp': datetime,
            'learner': str,
            'assignment': RecommendedActivity,
            'recommendations': List[RecommendationRow]
        }

        self.attribute_map = {
            'type': '_type',
            'timestamp': 'timestamp',
            'learner': 'learner',
            'assignment': 'assignment',
            'recommendations': 'recommendations'
        }

        self._type = type
        self._timestamp = timestamp
        self._learner = learner
        self._assignment = assignment
        self._recommendations = recommendations

    @classmethod
    def from_dict(cls, dikt) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Recommendation of this Recommendation.  # noqa: E501
        :rtype: Recommendation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Recommendation.


        :return: The type of this Recommendation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Recommendation.


        :param type: The type of this Recommendation.
        :type type: str
        """
        allowed_values = ["Recommendation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this Recommendation.

        ISO8601 formatted timestamp  # noqa: E501

        :return: The timestamp of this Recommendation.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this Recommendation.

        ISO8601 formatted timestamp  # noqa: E501

        :param timestamp: The timestamp of this Recommendation.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def learner(self) -> str:
        """Gets the learner of this Recommendation.

        ID of the learner requesting the recommendation  # noqa: E501

        :return: The learner of this Recommendation.
        :rtype: str
        """
        return self._learner

    @learner.setter
    def learner(self, learner: str):
        """Sets the learner of this Recommendation.

        ID of the learner requesting the recommendation  # noqa: E501

        :param learner: The learner of this Recommendation.
        :type learner: str
        """

        self._learner = learner

    @property
    def assignment(self) -> RecommendedActivity:
        """Gets the assignment of this Recommendation.


        :return: The assignment of this Recommendation.
        :rtype: RecommendedActivity
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment: RecommendedActivity):
        """Sets the assignment of this Recommendation.


        :param assignment: The assignment of this Recommendation.
        :type assignment: RecommendedActivity
        """

        self._assignment = assignment

    @property
    def recommendations(self) -> List[RecommendationRow]:
        """Gets the recommendations of this Recommendation.

        Array of RecommendationRow objects. Null if assignment is not null.  # noqa: E501

        :return: The recommendations of this Recommendation.
        :rtype: List[RecommendationRow]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations: List[RecommendationRow]):
        """Sets the recommendations of this Recommendation.

        Array of RecommendationRow objects. Null if assignment is not null.  # noqa: E501

        :param recommendations: The recommendations of this Recommendation.
        :type recommendations: List[RecommendationRow]
        """

        self._recommendations = recommendations
