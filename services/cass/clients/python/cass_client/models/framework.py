# coding: utf-8

"""
    CASS API

    This API is used to interact with the data stored in the CASS database.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Framework(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'type': 'str',
        'id': 'str',
        'owner': 'list[str]',
        'signature': 'list[str]',
        'competency': 'list[str]',
        'description': 'str',
        'level': 'list[str]',
        'name': 'str',
        'relation': 'list[str]',
        'schemadate_created': 'datetime',
        'schemadate_modified': 'datetime'
    }

    attribute_map = {
        'context': '@context',
        'type': '@type',
        'id': '@id',
        'owner': '@owner',
        'signature': '@signature',
        'competency': 'competency',
        'description': 'description',
        'level': 'level',
        'name': 'name',
        'relation': 'relation',
        'schemadate_created': 'schema:dateCreated',
        'schemadate_modified': 'schema:dateModified'
    }

    def __init__(self, context=None, type=None, id=None, owner=None, signature=None, competency=None, description=None, level=None, name=None, relation=None, schemadate_created=None, schemadate_modified=None):  # noqa: E501
        """Framework - a model defined in Swagger"""  # noqa: E501

        self._context = None
        self._type = None
        self._id = None
        self._owner = None
        self._signature = None
        self._competency = None
        self._description = None
        self._level = None
        self._name = None
        self._relation = None
        self._schemadate_created = None
        self._schemadate_modified = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if signature is not None:
            self.signature = signature
        if competency is not None:
            self.competency = competency
        if description is not None:
            self.description = description
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if relation is not None:
            self.relation = relation
        if schemadate_created is not None:
            self.schemadate_created = schemadate_created
        if schemadate_modified is not None:
            self.schemadate_modified = schemadate_modified

    @property
    def context(self):
        """Gets the context of this Framework.  # noqa: E501


        :return: The context of this Framework.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Framework.


        :param context: The context of this Framework.  # noqa: E501
        :type: str
        """
        allowed_values = ["http://insertCassSchemaUrl/0.3"]  # noqa: E501
        if context not in allowed_values:
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"  # noqa: E501
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def type(self):
        """Gets the type of this Framework.  # noqa: E501


        :return: The type of this Framework.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Framework.


        :param type: The type of this Framework.  # noqa: E501
        :type: str
        """
        allowed_values = ["Framework"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Framework.  # noqa: E501

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :return: The id of this Framework.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Framework.

        The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See background notes for more details.  # noqa: E501

        :param id: The id of this Framework.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this Framework.  # noqa: E501

        Owner public key  # noqa: E501

        :return: The owner of this Framework.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Framework.

        Owner public key  # noqa: E501

        :param owner: The owner of this Framework.  # noqa: E501
        :type: list[str]
        """

        self._owner = owner

    @property
    def signature(self):
        """Gets the signature of this Framework.  # noqa: E501

        Owner signature  # noqa: E501

        :return: The signature of this Framework.  # noqa: E501
        :rtype: list[str]
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Framework.

        Owner signature  # noqa: E501

        :param signature: The signature of this Framework.  # noqa: E501
        :type: list[str]
        """

        self._signature = signature

    @property
    def competency(self):
        """Gets the competency of this Framework.  # noqa: E501

        URI IDs of the competencies in the framework.  # noqa: E501

        :return: The competency of this Framework.  # noqa: E501
        :rtype: list[str]
        """
        return self._competency

    @competency.setter
    def competency(self, competency):
        """Sets the competency of this Framework.

        URI IDs of the competencies in the framework.  # noqa: E501

        :param competency: The competency of this Framework.  # noqa: E501
        :type: list[str]
        """

        self._competency = competency

    @property
    def description(self):
        """Gets the description of this Framework.  # noqa: E501

        The description of the framework.  # noqa: E501

        :return: The description of this Framework.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Framework.

        The description of the framework.  # noqa: E501

        :param description: The description of this Framework.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def level(self):
        """Gets the level of this Framework.  # noqa: E501

        In Schema.org, URLs of levels included in the framework.  # noqa: E501

        :return: The level of this Framework.  # noqa: E501
        :rtype: list[str]
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Framework.

        In Schema.org, URLs of levels included in the framework.  # noqa: E501

        :param level: The level of this Framework.  # noqa: E501
        :type: list[str]
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this Framework.  # noqa: E501

        The name of the framework.  # noqa: E501

        :return: The name of this Framework.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Framework.

        The name of the framework.  # noqa: E501

        :param name: The name of this Framework.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def relation(self):
        """Gets the relation of this Framework.  # noqa: E501

        The URLs of the Relation objects included in the framework.  # noqa: E501

        :return: The relation of this Framework.  # noqa: E501
        :rtype: list[str]
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Framework.

        The URLs of the Relation objects included in the framework.  # noqa: E501

        :param relation: The relation of this Framework.  # noqa: E501
        :type: list[str]
        """

        self._relation = relation

    @property
    def schemadate_created(self):
        """Gets the schemadate_created of this Framework.  # noqa: E501

        The date the framework was created.  # noqa: E501

        :return: The schemadate_created of this Framework.  # noqa: E501
        :rtype: datetime
        """
        return self._schemadate_created

    @schemadate_created.setter
    def schemadate_created(self, schemadate_created):
        """Sets the schemadate_created of this Framework.

        The date the framework was created.  # noqa: E501

        :param schemadate_created: The schemadate_created of this Framework.  # noqa: E501
        :type: datetime
        """

        self._schemadate_created = schemadate_created

    @property
    def schemadate_modified(self):
        """Gets the schemadate_modified of this Framework.  # noqa: E501

        The last time the framework was modified.  # noqa: E501

        :return: The schemadate_modified of this Framework.  # noqa: E501
        :rtype: datetime
        """
        return self._schemadate_modified

    @schemadate_modified.setter
    def schemadate_modified(self, schemadate_modified):
        """Sets the schemadate_modified of this Framework.

        The last time the framework was modified.  # noqa: E501

        :param schemadate_modified: The schemadate_modified of this Framework.  # noqa: E501
        :type: datetime
        """

        self._schemadate_modified = schemadate_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Framework):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
